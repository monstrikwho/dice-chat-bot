const { bot } = require("../init/startBot");
const User = require("../models/user");
const Extra = require("telegraf/extra");

const extraBoard = require("../helpers/extraBoard");
let message = ({ balance }) => `–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏.
–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ‚ÇΩ`;

module.exports = (diceGame) => {
  diceGame.action("–û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫–∏", async (ctx) => {
    let state = ctx.session.state;

    // –ï—Å–ª–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (state.countRate === 0)
      return await ctx.answerCbQuery("–°—Ç–∞–≤–∫–æ –Ω–µ –±—ã–ª–æ", true);

    const { mainBalance, demoBalance } = await User.findOne({
      userId: ctx.from.id,
    });

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–µ–π—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –∏ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    state.rate = {
      1: 0,
      2: 0,
      3: 0,
      4: 0,
      5: 0,
      6: 0,
      "1-2": 0,
      "3-4": 0,
      "5-6": 0,
      even: 0,
      odd: 0,
    };
    state.valueRate = 1;
    state.countRate = 0;
    state.balance = state.activeGame === "mainGame" ? mainBalance : demoBalance;
    ctx.session.state = state; // Save in session

    // –ß–∏—Å—Ç–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  // 1-2
  diceGame.action(/1Ô∏è‚É£.*2Ô∏è‚É£|2Ô∏è‚É£.*1Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate["1-2"] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  // 3-4
  diceGame.action(/3Ô∏è‚É£.*4Ô∏è‚É£|4Ô∏è‚É£.*3Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate["3-4"] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  // 5-6
  diceGame.action(/5Ô∏è‚É£.*6Ô∏è‚É£|6Ô∏è‚É£.*5Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate["5-6"] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/1Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate[1] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/2Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate[2] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/3Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate[3] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/4Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate[4] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/5Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate[5] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/6Ô∏è‚É£/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate[6] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/–ù–µ—á–µ—Ç–Ω–æ–µ/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate["odd"] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/–ß–µ—Ç–Ω–æ–µ/, async (ctx) => {
    let state = ctx.session.state;

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    if (state.balance - state.valueRate < 0) {
      return await ctx.answerCbQuery(
        "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
        true
      );
    } else {
      state.balance -= state.valueRate;
    }
    state.rate["even"] += state.valueRate;
    state.countRate += 1;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action(/(?:1‚ÇΩ|5‚ÇΩ|10‚ÇΩ|50‚ÇΩ|100‚ÇΩ|500‚ÇΩ)/, async (ctx) => {
    const value = ctx.update.callback_query.data
      .replace(/\D+/, "")
      .replace("‚ÇΩ", "");
    let state = ctx.session.state;

    if (state.valueRate === +value)
      return await ctx.answerCbQuery("–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω", true);

    // –ò–∑–µ–Ω—è–µ–º —Å—Ç–µ–π—Ç
    state.valueRate = +value;
    ctx.session.state = state; // Save in session

    // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
    await bot.telegram.editMessageText(
      ctx.from.id,
      state.activeBoard.message_id,
      null,
      message(state),
      extraBoard(state)
    );
  });

  diceGame.action("–ë—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏ üé≤", async (ctx) => {
    const state = ctx.session.state;

    if (state.countRate === 0) {
      return ctx.answerCbQuery(
        "–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –±—Ä–æ—Å–∏—Ç—å –∫–æ—Å—Ç–∏.",
        true
      );
    }

    await ctx.deleteMessage(ctx.session.state.activeBoard.message_id);

    const diceMsg = await bot.telegram.sendDice(ctx.from.id, "üé≤");
    const value = diceMsg.dice.value;

    let winSum = 0;

    if (value === 1) {
      winSum +=
        state.rate[1] * 10 + state.rate["1-2"] * 5 + state.rate["odd"] * 3;
    }
    if (value === 2) {
      winSum +=
        state.rate[2] * 10 + state.rate["1-2"] * 5 + state.rate["even"] * 3;
    }
    if (value === 3) {
      winSum +=
        state.rate[3] * 10 + state.rate["3-4"] * 5 + state.rate["odd"] * 3;
    }
    if (value === 4) {
      winSum +=
        state.rate[4] * 10 + state.rate["3-4"] * 5 + state.rate["even"] * 3;
    }
    if (value === 5) {
      winSum +=
        state.rate[5] * 10 + state.rate["5-6"] * 5 + state.rate["odd"] * 3;
    }
    if (value === 6) {
      winSum +=
        state.rate[6] * 10 + state.rate["5-6"] * 5 + state.rate["even"] * 3;
    }

    ctx.session.state.balance += winSum;

    if (state.activeGame === "mainGame") {
      await User.updateOne(
        { userId: ctx.from.id },
        { mainBalance: ctx.session.state.balance }
      );
    } else {
      await User.updateOne(
        { userId: ctx.from.id },
        { demoBalance: ctx.session.state.balance }
      );
    }

    ctx.session.state.activeBoard = await ctx.reply(
      `–í–∞–º –≤—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: ${value}
–í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${winSum}`,
      Extra.markup((m) =>
        m.inlineKeyboard([
          [
            m.callbackButton(
              "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É",
              "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É"
            ),
          ],
        ])
      )
    );
  });

  bot.action(/–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É/, async (ctx) => {
    let state = ctx.session.state;

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É"
    await ctx.deleteMessage(state.activeBoard.message_id);

    const { mainBalance, demoBalance } = await User.findOne({
      userId: ctx.from.id,
    });

    state.rate = {
      1: 0,
      2: 0,
      3: 0,
      4: 0,
      5: 0,
      6: 0,
      "1-2": 0,
      "3-4": 0,
      "5-6": 0,
      even: 0,
      odd: 0,
    };
    state.countRate = 0;
    state.balance = state.activeGame === "mainGame" ? mainBalance : demoBalance;
    ctx.session.state = state;

    ctx.session.state.activeBoard = await ctx.reply(
      message(state),
      extraBoard(state)
    );
  });
};
