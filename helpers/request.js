const axios = require("axios");
const cheerio = require("cheerio");
const querystring = require("querystring");

const User = require("../models/user");

const answerToRequest = require("./answerToRequest");

module.exports = async (ctx, reqWeek, setDay) => {
  const selectUser = await User.findOne({ userId: ctx.from.id });
  const user = {
    data() {
      if (selectUser.otherTeacher) {
        return {
          kf: 0,
          tch: selectUser.otherTeacher,
          nd: reqWeek,
          go: "–ü–æ–∫–∞–∑–∞—Ç—å",
        };
      }
      if (selectUser.otherStudents) {
        return {
          ft: 0,
          sp: 0,
          gp: selectUser.otherStudents,
          nd: reqWeek,
          go: "–ü–æ–∫–∞–∑–∞—Ç—å",
        };
      }
      if (selectUser.person === "–°—Ç—É–¥–µ–Ω—Ç") {
        return {
          ft: 0,
          sp: 0,
          gp: selectUser.group,
          nd: reqWeek,
          go: "–ü–æ–∫–∞–∑–∞—Ç—å",
        };
      }
      if (selectUser.person === "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") {
        return {
          kf: 0,
          tch: selectUser.teacherName,
          nd: reqWeek,
          go: "–ü–æ–∫–∞–∑–∞—Ç—å",
        };
      }
    },
    url() {
      if (selectUser.otherTeacher) {
        return `http://rasp.barsu.by/teach.php`;
      }
      if (selectUser.otherStudents) {
        return `http://rasp.barsu.by/stud.php`;
      }
      if (selectUser.person === "–°—Ç—É–¥–µ–Ω—Ç") {
        return `http://rasp.barsu.by/stud.php`;
      }
      if (selectUser.person === "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") {
        return `http://rasp.barsu.by/teach.php`;
      }
    },
  };

  await axios
    .post(user.url(), querystring.stringify(user.data()))
    .then(async (res) => {
      const $ = cheerio.load(res.data, { decodeEntities: false });
      const table = $(".table-responsive tbody");

      const Monday = table.find("tr").slice(0, 8);
      const Tuesday = table.find("tr").slice(9, 17);
      const Wednesday = table.find("tr").slice(18, 26);
      const Thursday = table.find("tr").slice(27, 35);
      const Friday = table.find("tr").slice(36, 44);
      const Saturday = table.find("tr").slice(45, 53);

      const week = [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday];
      const today = new Date().getDay();

      // SETDAY === 0=–ü–Ω, 1=–í—Ç, 2=–°—Ä, 3=–ß—Ç, 4=–ü—Ç, 5=–í—Å—è –Ω–µ–¥–µ–ª—è, 8=–°–µ–≥–æ–¥–Ω—è, 9=–ó–∞–≤—Ç—Ä–∞
      // TODAY === 0-–í—Å, 1-–ü–Ω, 2-–í—Ç, 3-–°—Ä, 4-–ß—Ç, 5-–ü—Ç, 6-–°–±.
      const tr = setDay.toString().match(/(?:0|1|2|3|4)/)
        ? week[setDay]
        : setDay !== 9 // –ï—Å–ª–∏ –∂–º–µ–º –Ω–∞ "—Å–µ–≥–æ–¥–Ω—è"
        ? week[today - 1] // –ë–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        : today === 0 // –ï—Å–ª–∏ —É –Ω–∞—Å –í—Å
        ? week[0] // –ë–µ—Ä–µ–º —Å–ª–µ–¥ –ü–Ω
        : week[today]; // –ë–µ—Ä–µ–º —Å–ª–µ–¥ –¥–µ–Ω—å

      let count = 0;

      for (let i = 0; i < tr.length; i++) {
        let td;
        if (i === 0) {
          td = $(tr[i]).find("td").slice(2, 7);
        } else {
          td = $(tr[i]).find("td");
        }

        const answer = answerToRequest($, td, selectUser);

        if (answer) {
          count++;
          await ctx.replyWithHTML(answer);
        }
      }
      
      if (count === 0) {
        await ctx.reply("–ù–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –ø–∞—Ä –Ω–µ—Ç—É.");
      }
    })
    .catch((err) => {
      ctx.reply("–ú–Ω–µ –∂–∞–ª—å, –Ω–æ —Å–∞–π—Ç —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞–∫—Ä—ã–ª—Å—è üòû");
    });
};
