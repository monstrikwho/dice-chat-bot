const { bot } = require("../init/startBot");
const Extra = require("telegraf/extra");
const isNumber = require("is-number");
const moment = require("moment");

const User = require("../models/user");
const MainStats = require("../models/mainstats");
const Error = require("../models/errors");

const { saveGames } = require("./saveData");
const extraBoard = require("./slotExtra");

let message = ({ balance }) => `–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏.
–í–∞—à –±–∞–ª–∞–Ω—Å: ${balance} ‚ÇΩ`;

module.exports = async (game) => {
  try {
    game.action("üóë –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞–≤–∫–∏", async (ctx) => {
      let state = ctx.session.state;

      // –ï—Å–ª–∏ —Å—Ç–∞–≤–æ–∫ –Ω–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      if (state.countRate === 0) {
        return await ctx.answerCbQuery("–°—Ç–∞–≤–∫–æ –Ω–µ –±—ã–ª–æ", true);
      }

      const { mainBalance, demoBalance } = await User.findOne({
        userId: ctx.from.id,
      });

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–µ–π—Ç –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–µ–π—Ç –∏ –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
      state.rate = {
        jek: 0,
      };
      state.countRate = 0;
      state.balance =
        state.activeGame === "mainGame" ? mainBalance : demoBalance;
      ctx.session.state = state;

      const extra = await extraBoard(state);

      // –ß–∏—Å—Ç–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π board
      try {
        await bot.telegram.editMessageText(
          ctx.from.id,
          state.activeBoard.message_id,
          null,
          message(state),
          extra
        );
      } catch (error) {}
    });

    game.action(/–ü–æ—Å—Ç–∞–≤–∏—Ç—å/, async (ctx) => {
      let state = ctx.session.state;

      const amountRate = state.otherRateActive
        ? +state.otherRate
        : +state.valueRate;

      if (state.balance - amountRate < 0) {
        return await ctx.answerCbQuery(
          "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ",
          true
        );
      }

      if (amountRate === 0) {
        return await ctx.answerCbQuery(
          "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–∞–≤–∫—É 0–†",
          true
        );
      }

      state.balance -= amountRate;
      state.rate["jek"] += amountRate;
      state.countRate += 1;
      ctx.session.state = state;

      state.rate["jek"] = +state.rate["jek"].toFixed(2);
      state.balance = +state.balance.toFixed(2);

      const extra = await extraBoard(state);

      // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
      try {
        await bot.telegram.editMessageText(
          ctx.from.id,
          state.activeBoard.message_id,
          null,
          message(state),
          extra
        );
      } catch (error) {}
    });

    game.action(/(?:10‚ÇΩ|50‚ÇΩ|100‚ÇΩ|500‚ÇΩ|1000‚ÇΩ)/, async (ctx) => {
      const value = ctx.update.callback_query.data
        .replace(/\D+/, "")
        .replace("‚ÇΩ", "");
      let state = ctx.session.state;

      if (state.valueRate === +value) {
        return await ctx.answerCbQuery("–†–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω", true);
      }

      state.valueRate = +value;
      state.otherRateActive = false;
      ctx.session.state = state;

      const extra = await extraBoard(state);

      // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
      try {
        await bot.telegram.editMessageText(
          ctx.from.id,
          state.activeBoard.message_id,
          null,
          message(state),
          extra
        );
      } catch (error) {}
    });

    game.action(/–î—Ä—É–≥–∞—è —Å—É–º–º–∞/, async (ctx) => {
      if (
        ctx.session.state.otherRateActive &&
        ctx.session.state.otherRate < 1
      ) {
        return await ctx.answerCbQuery(
          "–í—ã –Ω–µ –Ω–∞–ø–∏—Å–∞–ª–∏ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏.",
          true
        );
      }

      ctx.session.state = {
        ...ctx.session.state,
        valueRate: 0,
        otherRate: 0,
        otherRateActive: true,
      };

      const state = ctx.session.state;

      await ctx.answerCbQuery(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ.",
        true
      );

      const extra = await extraBoard(state);

      // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
      try {
        await bot.telegram.editMessageText(
          ctx.from.id,
          state.activeBoard.message_id,
          null,
          message(state),
          extra
        );
      } catch (error) {}
    });

    game.on("text", async (ctx) => {
      const msg = ctx.update.message.text;

      if (!ctx.session.state.otherRateActive) return;

      if (!isNumber(msg)) {
        return await ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã —Ü–∏—Ñ—Ä—ã."
        );
      }

      const rate = +(+msg).toFixed(2);

      if (
        rate === 10 ||
        rate === 50 ||
        rate === 100 ||
        rate === 500 ||
        rate === 1000
      ) {
        return await ctx.reply(
          "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—É–º–º—É –∏–∑ —É–∂–µ –∏–º–µ—é—â–∏—Ö—Å—è –≤ –±–æ—Ä–¥–µ."
        );
      }

      if (ctx.session.state.balance < rate) {
        return await ctx.reply(
          "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –±–∞–ª–∞–Ω—Å."
        );
      }

      const { minGameRate } = await MainStats.findOne();

      if (rate < minGameRate) {
        return await ctx.reply(
          `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${minGameRate}‚ÇΩ`
        );
      }

      ctx.session.state = {
        ...ctx.session.state,
        valueRate: 0,
        otherRate: rate,
      };

      await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏: ${rate}‚ÇΩ`);

      const state = ctx.session.state;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É"
      try {
        await ctx.deleteMessage(state.activeBoard.message_id);
      } catch (error) {}

      const extra = await extraBoard(state);

      // –ò–∑–º–µ–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π board
      try {
        ctx.session.state.activeBoard = await bot.telegram.sendMessage(
          ctx.from.id,
          message(state),
          extra
        );
      } catch (error) {}
    });

    game.action("–ö—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω üé∞", async (ctx) => {
      const state = ctx.session.state;
      const amountRate = state.rate["jek"];

      if (state.countRate === 0) {
        return ctx.answerCbQuery(
          "–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω.",
          true
        );
      }

      const { slotCoef } = await MainStats.findOne();

      try {
        await ctx.deleteMessage(state.activeBoard.message_id);
      } catch (error) {}

      const diceMsg = await bot.telegram.sendDice(ctx.from.id, { emoji: "üé∞" });
      const value = diceMsg.dice.value;

      let winSum = 0;
      let resMsg = "–í—ã –±—ã–ª–∏ –±–ª–∏–∑–∫–æ! –ù–µ —Å–¥–∞–≤–∞–π–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!";

      if (value === 1 || value === 22 || value === 43 || value === 64) {
        winSum = +(amountRate * slotCoef).toFixed(2);
        resMsg = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";
      }

      state.rateMenu = false;
      state.balance = +(state.balance + winSum).toFixed(2);
      ctx.session.state = state;

      setTimeout(async () => {
        ctx.session.state.activeBoard = await ctx.reply(
          `${resMsg}
          
  –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ - ${amountRate}
  –í–∞—à –≤—ã–∏–≥—Ä—ã—à - ${winSum}
  –í–∞—à –±–∞–ª–∞–Ω—Å - ${state.balance}`,
          Extra.markup((m) =>
            m.inlineKeyboard([
              [
                m.callbackButton(
                  "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É",
                  "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É"
                ),
                m.callbackButton("–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑", "–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑"),
              ],
            ])
          )
        );
      }, 1500);

      if (state.activeGame === "mainGame") {
        await User.updateOne(
          { userId: ctx.from.id },
          { mainBalance: state.balance }
        );
      }
      if (state.activeGame === "demoGame") {
        await User.updateOne(
          { userId: ctx.from.id },
          { demoBalance: state.balance }
        );
      }
      saveGames({
        typeGame: "slot",
        typeBalance: state.activeGame,
        result: winSum > 0 ? "win" : "lose",
        rateAmount: amountRate,
        rateWinAmount: winSum,
        rateValue: value,
        rate: state.rate,
        userId: ctx.from.id,
        date: moment().format("YYYY-MM-DD"),
      });
    });

    game.action(/–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É/, async (ctx) => {
      let state = ctx.session.state;

      // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–°–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–Ω—É —Å—Ç–∞–≤–∫—É"
      try {
        await ctx.deleteMessage(state.activeBoard.message_id);
      } catch (error) {}

      const { mainBalance, demoBalance } = await User.findOne({
        userId: ctx.from.id,
      });

      state.rate = {
        jek: 0,
      };
      state.countRate = 0;
      state.balance =
        state.activeGame === "mainGame" ? mainBalance : demoBalance;
      state.rateMenu = true;
      ctx.session.state = state;

      const extra = await extraBoard(state);

      ctx.session.state.activeBoard = await ctx.reply(message(state), extra);
    });

    game.action(/–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑/, async (ctx) => {
      let state = ctx.session.state;
      const amountRate = state.rate["jek"];

      if (state.balance - amountRate < 0) {
        return ctx.answerCbQuery(
          "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –ª–∏–±–æ —Å–¥–µ–ª–∞–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É.",
          true
        );
      }

      const { slotCoef } = await MainStats.findOne();

      try {
        await ctx.deleteMessage(ctx.session.state.activeBoard.message_id);
      } catch (error) {}

      const diceMsg = await bot.telegram.sendDice(ctx.from.id, { emoji: "üé∞" });
      const value = diceMsg.dice.value;

      let winSum = 0;
      let resMsg = "–í—ã –±—ã–ª–∏ –±–ª–∏–∑–∫–æ! –ù–µ —Å–¥–∞–≤–∞–π–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!";

      if (value === 1 || value === 64 || value === 22 || value === 43) {
        winSum = +(amountRate * slotCoef).toFixed(2);
        resMsg = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";
      }

      state.rateMenu = false;
      state.balance = +(state.balance - amountRate + winSum).toFixed(2);
      ctx.session.state = state;

      setTimeout(async () => {
        ctx.session.state.activeBoard = await ctx.reply(
          `${resMsg}
          
  –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ - ${amountRate}
  –í–∞—à –≤—ã–∏–≥—Ä—ã—à - ${winSum}
  –í–∞—à –±–∞–ª–∞–Ω—Å - ${state.balance}`,
          Extra.markup((m) =>
            m.inlineKeyboard([
              [
                m.callbackButton(
                  "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É",
                  "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É"
                ),
                m.callbackButton("–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑", "–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑"),
              ],
            ])
          )
        );
      }, 1500);

      if (state.activeGame === "mainGame") {
        await User.updateOne(
          { userId: ctx.from.id },
          { mainBalance: state.balance }
        );
      }
      if (state.activeGame === "demoGame") {
        await User.updateOne(
          { userId: ctx.from.id },
          { demoBalance: state.balance }
        );
      }
      saveGames({
        typeGame: "slot",
        typeBalance: state.activeGame,
        result: winSum > 0 ? "win" : "lose",
        rateAmount: amountRate,
        rateWinAmount: winSum,
        rateValue: value,
        rate: state.rate,
        userId: ctx.from.id,
        date: moment().format("YYYY-MM-DD"),
      });
    });

    game.on("dice", async (ctx) => {
      if (ctx.update.message.forward_date) return;

      const dice = ctx.update.message.dice;
      if (dice.emoji !== "üé∞") return;

      const value = dice.value;
      const state = ctx.session.state;
      const amountRate = state.rate["jek"];

      if (state.rateMenu) {
        // –ï—Å–ª–∏ –±—Ä–æ—Å–∞–µ–º –ø–æ—Å–ª–µ —Å—Ç–∞–≤–∫–∏
        if (state.countRate === 0) {
          return ctx.reply(
            "–í—ã –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —Å—Ç–∞–≤–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É, —á—Ç–æ–±—ã –∫—Ä—É—Ç–∏—Ç—å –±–∞—Ä–∞–±–∞–Ω."
          );
        }
        state.rateMenu = false;
      } else {
        // –ï—Å–ª–∏ —Ö–æ—Ç–∏–º –±—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑ —Å —Ç–æ–π –∂–µ —Å—Ç–∞–≤–∫–æ–π
        if (state.balance - amountRate < 0) {
          return ctx.reply(
            "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, –ª–∏–±–æ —Å–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É –º–µ–Ω—å—à–∏–º —Ä–∞–∑–º–µ—Ä–æ–º."
          );
        }
        state.balance = +(state.balance - amountRate).toFixed(2);
      }

      const { slotCoef } = await MainStats.findOne();

      try {
        await ctx.deleteMessage(state.activeBoard.message_id);
      } catch (error) {}

      let winSum = 0;
      let resMsg = "–í—ã –±—ã–ª–∏ –±–ª–∏–∑–∫–æ! –ù–µ —Å–¥–∞–≤–∞–π–µ—Å—å, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç!";

      if (value === 1 || value === 22 || value === 43 || value === 64) {
        winSum = +(amountRate * slotCoef).toFixed(2);
        resMsg = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ üéâ";
      }

      state.balance = +(state.balance + winSum).toFixed(2);
      ctx.session.state = state;

      if (state.activeGame === "mainGame") {
        await User.updateOne(
          { userId: ctx.from.id },
          { mainBalance: state.balance }
        );
      }
      if (state.activeGame === "demoGame") {
        await User.updateOne(
          { userId: ctx.from.id },
          { demoBalance: state.balance }
        );
      }
      saveGames({
        typeGame: "slot",
        typeBalance: state.activeGame,
        result: winSum > 0 ? "win" : "lose",
        rateAmount: amountRate,
        rateWinAmount: winSum,
        rateValue: value,
        rate: state.rate,
        userId: ctx.from.id,
        date: moment().format("YYYY-MM-DD"),
      });

      setTimeout(async () => {
        ctx.session.state.activeBoard = await ctx.reply(
          `${resMsg}
          
  –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ - ${state.rate["jek"]}
  –í–∞—à –≤—ã–∏–≥—Ä—ã—à - ${winSum}
  –í–∞—à –±–∞–ª–∞–Ω—Å - ${state.balance}`,
          Extra.markup((m) =>
            m.inlineKeyboard([
              [
                m.callbackButton(
                  "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É",
                  "–°–¥–µ–ª–∞—Ç—å –¥—Ä—É–≥—É—é —Å—Ç–∞–≤–∫—É"
                ),
                m.callbackButton("–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑", "–ö—Ä—É—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑"),
              ],
            ])
          )
        );
      }, 1500);
    });
  } catch (error) {
    const err = new Error({
      message: error.message,
      err: error,
    });
    await err.save();
  }
};
