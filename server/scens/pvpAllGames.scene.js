const isNumber = require("is-number");
const Scene = require("telegraf/scenes/base");

const { bot } = require("../init/startBot");
const { mainMenuActions } = require("./mainMenu.scene");

const User = require("../models/user");
const PvpModel = require("../models/pvpAllGames");
const MainStats = require("../models/mainstats");

const pvpAllGames = new Scene("pvpAllGames");
pvpAllGames.enter(async (ctx) => {
  ctx.session.state.boardCountPage = 1;
  await showMainView(ctx);
});

pvpAllGames.leave(async (ctx) => {
  const activeBoard = ctx.session.state.activeBoard;
  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}
});

mainMenuActions(pvpAllGames);

pvpAllGames.action(">", async (ctx) => {
  const { boardCountPage, boardMaxPages, actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  if (boardCountPage + 1 <= boardMaxPages) {
    ctx.session.state.boardCountPage = boardCountPage + 1;
  } else {
    await removeState(ctx);
    return await ctx.answerCbQuery("–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", true);
  }

  await showMainView(ctx);
  await removeState(ctx);
});

pvpAllGames.action("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  ctx.session.state.boardCountPage = 1;

  await showMainView(ctx);
  await removeState(ctx);
});

pvpAllGames.action("<", async (ctx) => {
  const { boardCountPage, actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  if (boardCountPage - 1 !== 0) {
    ctx.session.state.boardCountPage = boardCountPage - 1;
  } else {
    await removeState(ctx);
    return await ctx.answerCbQuery("–õ–µ–≤–µ–µ –Ω–µ–∫—É–¥–∞..", true);
  }

  await showMainView(ctx);
  await removeState(ctx);
});

pvpAllGames.action(/(?:–°–æ–∑–¥–∞—Ç—å)/, async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  const emoji = ctx.update.callback_query.data.split(" ")[1];
  ctx.session.state.typeGame = emoji;

  await showCreateLobbyStep1(ctx);
  await removeState(ctx);
});

pvpAllGames.action(/(?:2 –∏–≥—Ä–æ–∫–∞|3 –∏–≥—Ä–æ–∫–∞|5 –∏–≥—Ä–æ–∫–æ–≤)/, async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  const createLobbyRoomSize = +ctx.update.callback_query.data.replace(
    /\W+/g,
    ""
  );
  ctx.session.state.createLobbyRoomSize = createLobbyRoomSize;

  await showCreateLobbyStep2(ctx);
  await removeState(ctx);
});

pvpAllGames.action(/(?:25‚ÇΩ|50‚ÇΩ|100‚ÇΩ|250‚ÇΩ|500‚ÇΩ)/, async (ctx) => {
  const value = +ctx.update.callback_query.data.match(/\d+/g)[0];

  ctx.session.state.createLobbyRate = value;
  await validateRate(ctx);
});

pvpAllGames.on("text", async (ctx) => {
  const msg = ctx.update.message.text;
  const { activeView, createLobbyStep } = ctx.session.state;

  if (activeView === "createlobby" && createLobbyStep === 2) {
    ctx.session.state.createLobbyRate = msg;
    await validateRate(ctx);
  }
});

pvpAllGames.action(/(?:lobby_id)/, async (ctx) => {
  const { actionStatus } = ctx.session.state;
  const btnData = ctx.update.callback_query.data;

  if (actionStatus) return;
  await setState(ctx);

  if (btnData.indexOf("lobby_id:") !== -1) {
    const lobbyId = btnData.replace("lobby_id:", "");
    ctx.session.state.lobbyId = lobbyId;
    await showSelectRivals(ctx);
  }

  await removeState(ctx);
});

pvpAllGames.action("–í—Å—Ç—É–ø–∏—Ç—å –≤ –ª–æ–±–±–∏", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  await joinToLobby(ctx);

  await removeState(ctx);
});

pvpAllGames.action("–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  await deleteLobby(ctx);

  await removeState(ctx);
});

pvpAllGames.action("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", async (ctx) => {
  const { activeView, createLobbyStep, actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  if (activeView === "createlobby" && createLobbyStep === 2) {
    await showCreateLobbyStep1(ctx);
  }

  if (activeView === "createlobby" && createLobbyStep === 1) {
    ctx.session.state.boardCountPage = 1;
    await showMainView(ctx);
  }

  if (activeView === "playwithrials") {
    ctx.session.state.boardCountPage = 1;
    await showMainView(ctx);
  }

  await removeState(ctx);
});

function mainExtra(boardGames, boardCountPage, uid) {
  if (boardGames.length === 0) {
    return {
      inline_keyboard: [
        [
          {
            text: "<",
            callback_data: "<",
          },
          {
            text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
            callback_data: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
          },
          {
            text: ">",
            callback_data: ">",
          },
        ],
        [
          {
            text: "–°–æ–∑–¥–∞—Ç—å üé≤",
            callback_data: "–°–æ–∑–¥–∞—Ç—å üé≤",
          },
          {
            text: "–°–æ–∑–¥–∞—Ç—å ‚öΩÔ∏è",
            callback_data: "–°–æ–∑–¥–∞—Ç—å ‚öΩÔ∏è",
          },
          {
            text: "–°–æ–∑–¥–∞—Ç—å üé≥",
            callback_data: "–°–æ–∑–¥–∞—Ç—å üé≥",
          },
        ],
        [
          {
            text: "–°–æ–∑–¥–∞—Ç—å üèÄ",
            callback_data: "–°–æ–∑–¥–∞—Ç—å üèÄ",
          },
          {
            text: "–°–æ–∑–¥–∞—Ç—å üéØ",
            callback_data: "–°–æ–∑–¥–∞—Ç—å üéØ",
          },
        ],
      ],
    };
  }

  const flatSingle = (arr) => [].concat(...arr);

  const row = flatSingle(
    ...boardGames[boardCountPage - 1].map((cols) =>
      cols.map((game) => [
        {
          text: `${game.typeGame} Lobby #${game.lobbyId} ‚ûñ ${
            game.prize
          } P  üë§ [${game.rivals.length}/${game.size}] ${
            game.creator === uid ? "‚è≥" : ""
          }`,
          callback_data: `lobby_id:${game.lobbyId}`,
        },
      ])
    )
  );

  return {
    inline_keyboard: [
      row,
      [
        {
          text: "<",
          callback_data: "<",
        },
        {
          text: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
          callback_data: "üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
        },
        {
          text: ">",
          callback_data: ">",
        },
      ],
      [
        {
          text: "–°–æ–∑–¥–∞—Ç—å üé≤",
          callback_data: "–°–æ–∑–¥–∞—Ç—å üé≤",
        },
        {
          text: "–°–æ–∑–¥–∞—Ç—å ‚öΩÔ∏è",
          callback_data: "–°–æ–∑–¥–∞—Ç—å ‚öΩÔ∏è",
        },
        {
          text: "–°–æ–∑–¥–∞—Ç—å üé≥",
          callback_data: "–°–æ–∑–¥–∞—Ç—å üé≥",
        },
      ],
      [
        {
          text: "–°–æ–∑–¥–∞—Ç—å üèÄ",
          callback_data: "–°–æ–∑–¥–∞—Ç—å üèÄ",
        },
        {
          text: "–°–æ–∑–¥–∞—Ç—å üéØ",
          callback_data: "–°–æ–∑–¥–∞—Ç—å üéØ",
        },
      ],
    ],
  };
}

// Create Lobby First Step
function clfsExtra(typeGame) {
  if (typeGame === "üé≤") {
    return {
      inline_keyboard: [
        [
          {
            text: "2 –∏–≥—Ä–æ–∫–∞",
            callback_data: "2 –∏–≥—Ä–æ–∫–∞",
          },
          {
            text: "3 –∏–≥—Ä–æ–∫–∞",
            callback_data: "3 –∏–≥—Ä–æ–∫–∞",
          },
          {
            text: "5 –∏–≥—Ä–æ–∫–æ–≤",
            callback_data: "5 –∏–≥—Ä–æ–∫–æ–≤",
          },
        ],
        [
          {
            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
          },
        ],
      ],
    };
  }
  if (typeGame === "‚öΩÔ∏è") {
    return {
      inline_keyboard: [
        [
          {
            text: "2 –∏–≥—Ä–æ–∫–∞",
            callback_data: "2 –∏–≥—Ä–æ–∫–∞",
          },
        ],
        [
          {
            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
          },
        ],
      ],
    };
  }
  if (typeGame === "üé≥") {
    return {
      inline_keyboard: [
        [
          {
            text: "2 –∏–≥—Ä–æ–∫–∞",
            callback_data: "2 –∏–≥—Ä–æ–∫–∞",
          },
        ],
        [
          {
            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
          },
        ],
      ],
    };
  }
  if (typeGame === "üèÄ") {
    return {
      inline_keyboard: [
        [
          {
            text: "2 –∏–≥—Ä–æ–∫–∞",
            callback_data: "2 –∏–≥—Ä–æ–∫–∞",
          },
        ],
        [
          {
            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
          },
        ],
      ],
    };
  }
  if (typeGame === "üéØ") {
    return {
      inline_keyboard: [
        [
          {
            text: "2 –∏–≥—Ä–æ–∫–∞",
            callback_data: "2 –∏–≥—Ä–æ–∫–∞",
          },
        ],
        [
          {
            text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
            callback_data: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
          },
        ],
      ],
    };
  }
}

// Create Lobby Second Step
function clssExtra() {
  return {
    inline_keyboard: [
      [
        {
          text: "25‚ÇΩ",
          callback_data: "25‚ÇΩ",
        },
        {
          text: "50‚ÇΩ",
          callback_data: "50‚ÇΩ",
        },
        {
          text: "100‚ÇΩ",
          callback_data: "100‚ÇΩ",
        },
        {
          text: "250‚ÇΩ",
          callback_data: "250‚ÇΩ",
        },
        {
          text: "500‚ÇΩ",
          callback_data: "500‚ÇΩ",
        },
      ],
      [
        {
          text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
          callback_data: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
        },
      ],
    ],
  };
}

async function showMainView(ctx) {
  const { activeBoard, boardCountPage } = ctx.session.state;
  ctx.session.state.activeView = "main";

  const user = await User.findOne({ userId: ctx.from.id });
  const games = await PvpModel.find({ statusGame: "waiting" });
  const top10 = await User.find({ "pvp.count": { $gte: 1 } })
    .sort({ "pvp.winCash": -1 })
    .limit(10);
  const latestGames = await PvpModel.find({
    rivals: ctx.from.id,
    statusGame: "completed",
  })
    .sort({ _id: -1 })
    .limit(10);
  const { pvpPercent } = await MainStats.findOne();

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}

  games.sort((a, b) => b.prize * b.rivals.length - a.prize * a.rivals.length);

  const boardGames = separate(games);
  const boardMaxPages = boardGames.length;

  const extra = mainExtra(boardGames, boardCountPage, ctx.from.id);
  const message = `PVP GAMES

–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ‚Ññ${user.pvp.rating}
–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.mainBalance} P
–í–∞—à –æ–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: ${user.pvp.winCash} P
–ö–æ–ª-–≤–æ –ø–æ–±–µ–¥: ${user.pvp.winCount}/${user.pvp.count} [${
    user.pvp.count ? ((user.pvp.winCount / user.pvp.count) * 100).toFixed(0) : 0
  }%]

–¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:
${top10
  .map(
    (item, i) =>
      `${i + 1}. ${
        item.userName
          ? "@" + item.userName
          : `<a href="tg://user?id=${item.userId}">@${item.userId}</a>`
      }`
  )
  .join("\n")}

–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–±–±–∏:
${
  latestGames.length !== 0
    ? latestGames
        .map((item) => {
          const status = item.winner === ctx.from.id ? "üü¢" : "üî¥";
          const typeGame = item.typeGame;
          const res = item.reversedResults[ctx.from.id].join(" - ");

          return `${typeGame} ‚ûñ ${status} üë§ ${item.rivals.length} üí∞ ${(
            item.prize *
            item.rivals.length *
            (1 - pvpPercent / 100)
          ).toFixed(2)} P   üìù ${res}`;
        })
        .join("\n")
    : "- —É –≤–∞—Å –Ω–µ—Ç—É —Å—ã–≥—Ä–∞–Ω–Ω—ã—Ö –∏–≥—Ä"
}

–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${boardGames.length === 0 ? 0 : boardCountPage}/${boardMaxPages}`;

  if (process.env.DEV !== "true") {
    try {
      ctx.session.state.activeBoard = await bot.telegram.sendPhoto(
        ctx.from.id,
        "AgACAgIAAxkBAAELz71hDPEBIJb6BTXwrjuedla1dnMEDgACyLUxG9FSaEj-twyihsA0_wEAAwIAA3MAAyAE",
        {
          caption: message,
          reply_markup: extra,
          parse_mode: "HTML",
        }
      );
    } catch (error) {}
  } else {
    try {
      ctx.session.state.activeBoard = await bot.telegram.sendPhoto(
        ctx.from.id,
        "AgACAgIAAxkBAAJG82ELh0OKxZcqOBcPuKViCYfQcEtqAAJntjEbwjVZSDynD3HIHdqBAQADAgADcwADIAQ",
        {
          caption: message,
          reply_markup: extra,
          parse_mode: "HTML",
        }
      );
    } catch (error) {
      console.log(error.message);
    }
  }

  ctx.session.state = {
    ...ctx.session.state,
    boardGames,
    boardCountPage,
    boardMaxPages,
  };
}

async function showCreateLobbyStep1(ctx) {
  const { activeBoard, typeGame } = ctx.session.state;
  ctx.session.state.activeView = "createlobby";
  ctx.session.state.createLobbyStep = 1;

  const extra = clfsExtra(typeGame);

  try {
    await bot.telegram.editMessageCaption(
      ctx.from.id,
      activeBoard.message_id,
      null,
      `Step 1/2 - –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤`,
      extra
    );
  } catch (error) {}
}

async function showCreateLobbyStep2(ctx) {
  const { activeBoard } = ctx.session.state;
  ctx.session.state.createLobbyStep = 2;

  const user = await User.findOne({ userId: ctx.from.id });

  const extra = clssExtra();

  try {
    await bot.telegram.editMessageCaption(
      ctx.from.id,
      activeBoard.message_id,
      null,
      `Step 2/2 - –í—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å—Ç–∞–≤–∫—É
–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.mainBalance} ‚ÇΩ`,
      extra
    );
  } catch (error) {}
}

async function validateRate(ctx) {
  const { createLobbyRate } = ctx.session.state;

  if (!isNumber(createLobbyRate)) {
    try {
      await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã.");
    } catch (error) {}
    return;
  }

  const { minGameRate } = await MainStats.findOne();

  if (createLobbyRate < minGameRate) {
    try {
      await ctx.reply(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${minGameRate} ‚ÇΩ`);
    } catch (error) {}
    return;
  }

  const user = await User.findOne({ userId: ctx.from.id });

  if (user.mainBalance - createLobbyRate < 0) {
    try {
      await ctx.reply(
        `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ c —Å—Ç–∞–≤–∫–æ–π ${createLobbyRate}‚ÇΩ
–í–∞—à –±–∞–ª–∞–Ω—Å: ${user.mainBalance}‚ÇΩ`
      );
    } catch (error) {}
    return;
  }

  ctx.session.state.createLobbyStep = 3;
  await createLobby(ctx);
}

async function createLobby(ctx) {
  const { typeGame, createLobbyRate, createLobbyRoomSize } = ctx.session.state;

  const user = await User.findOne({ userId: ctx.from.id });
  await User.updateOne(
    { userId: ctx.from.id },
    { mainBalance: +(user.mainBalance - createLobbyRate).toFixed(2) }
  );

  const { pvpGames } = await MainStats.findOne();
  await MainStats.updateOne({}, { $inc: { "pvpGames.prevLobbyId": 1 } });

  const game = new PvpModel({
    lobbyId: pvpGames.prevLobbyId + 1,
    typeGame,
    statusGame: "waiting",
    prize: createLobbyRate,
    size: createLobbyRoomSize,
    rivals: [ctx.from.id],
    rivalsLinks: {
      [ctx.from.id]: ctx.from.username
        ? `@${ctx.from.username}`
        : `<a href="tg://user?id=${ctx.from.id}">@${ctx.from.id}</a>`,
    },
    creator: ctx.from.id,
  });
  await game.save();

  try {
    await ctx.reply(`–õ–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ!
–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–æ —É–¥–µ—Ä–∞–∂–Ω–∞ —Å—É–º–º–∞: ${createLobbyRate} –†
–í–∞—à –±–∞–ª–∞–Ω—Å: ${(user.mainBalance - createLobbyRate).toFixed(2)} –†`);
  } catch (error) {}

  ctx.session.state.createLobbyStep = 0;

  await showMainView(ctx);
}

async function showSelectRivals(ctx) {
  const { lobbyId, activeBoard } = ctx.session.state;
  ctx.session.state.activeView = "playwithrials";

  const lobby = await PvpModel.findOne({ lobbyId });

  const { pvpPercent } = await MainStats.findOne();
  const lobbyPrize = lobby.prize * lobby.size * (1 - pvpPercent / 100);

  const isConsist = lobby.rivals.indexOf(ctx.from.id) !== -1 ? true : false;

  try {
    await bot.telegram.editMessageCaption(
      ctx.from.id,
      activeBoard.message_id,
      null,
      `${lobby.typeGame} Lobby #${lobbyId}
–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${lobbyPrize} ‚ÇΩ
${isConsist ? "\nüìã –í—ã —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –¥–∞–Ω–Ω–æ–º –ª–æ–±–±–∏!\n" : ""}
–°–æ–ø–µ—Ä–Ω–∏–∫–∏:
${[...lobby.rivals, ...new Array(lobby.size - lobby.rivals.length)]
  .map((item, i) => {
    if (!item) return `${i + 1}. –û–∂–∏–¥–∞–Ω–∏–µ..`;
    return `${i + 1}. ${lobby.rivalsLinks[item]}`;
  })
  .join("\n")}`,
      {
        parse_mode: "HTML",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: !isConsist ? "–í—Å—Ç—É–ø–∏—Ç—å –≤ –ª–æ–±–±–∏" : "–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏",
                callback_data: !isConsist
                  ? "–í—Å—Ç—É–ø–∏—Ç—å –≤ –ª–æ–±–±–∏"
                  : "–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏",
              },
              {
                text: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
                callback_data: "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥",
              },
            ],
          ],
        },
      }
    );
  } catch (error) {}
}

async function deleteLobby(ctx) {
  const { lobbyId } = ctx.session.state;

  const lobby = await PvpModel.findOne({ lobbyId });

  if (!lobby || lobby.rivals.indexOf(ctx.from.id) === -1) return;

  const user = await User.findOne({ userId: ctx.from.id });
  const userIndex = lobby.rivals.indexOf(ctx.from.id);

  lobby.rivals.splice(userIndex, 1);

  if (lobby.rivals.length !== 0) {
    await PvpModel.updateOne({ lobbyId }, { rivals: lobby.rivals });
  } else {
    await PvpModel.updateOne({ lobbyId }, { statusGame: "deleted" });
  }

  await User.updateOne(
    { userId: ctx.from.id },
    { mainBalance: +(user.mainBalance + lobby.prize).toFixed(2) }
  );

  try {
    await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ª–æ–±–±–∏.
–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω –±—ã–ª–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ —Å—É–º–º–∞ –≤–∞—à–µ–π —Å—Ç–∞–≤–∫–∏: ${lobby.prize} –†
–í–∞—à –±–∞–ª–∞–Ω—Å: ${(user.mainBalance + lobby.prize).toFixed(2)} –†`);
  } catch (error) {}

  await showMainView(ctx);
}

async function joinToLobby(ctx) {
  const { lobbyId } = ctx.session.state;

  const lobby = await PvpModel.findOne({ lobbyId });

  if (lobby.rivals.indexOf(ctx.from.id) > 0) return;

  lobby.rivals.push(ctx.from.id);
  lobby.rivalsLinks[ctx.from.id] = ctx.from.username
    ? `@${ctx.from.username}`
    : `<a href="tg://user?id=${ctx.from.id}">@${ctx.from.id}</a>`;

  await PvpModel.updateOne(
    { lobbyId },
    {
      rivals: lobby.rivals,
      rivalsLinks: lobby.rivalsLinks,
    }
  );

  const user = await User.findOne({ userId: ctx.from.id });
  await User.updateOne(
    { userId: ctx.from.id },
    { mainBalance: +(user.mainBalance - lobby.prize).toFixed(2) }
  );

  try {
    await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ª–æ–±–±–∏ #${lobbyId}
–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–∞ —Å–ø–∏—Å–∞–Ω–∞ —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: ${lobby.prize} P
–í–∞—à –±–∞–ª–∞–Ω—Å: ${(user.mainBalance - lobby.prize).toFixed(2)} P`);
  } catch (error) {}

  await showMainView(ctx);

  // –ï—Å–ª–∏ –≤—Å—Ç—É–ø–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫ - –ó–ê–ü–£–°–ö–ê–ï–ú –ò–ì–†–£
  checkLastPlayer(lobby, ctx);
}

async function checkLastPlayer(lobby, ctx) {
  if (lobby.rivals.length !== lobby.size) {
    return await showMainView(ctx);
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "pending"
  await PvpModel.updateOne(
    { lobbyId: lobby.lobbyId },
    {
      statusGame: "pending",
    }
  );

  saveGameMainStats(lobby);

  for (let i = 0; i < lobby.rivals.length; i++) {
    try {
      bot.telegram.sendMessage(
        lobby.rivals[i],
        `–õ–æ–±–±–∏ #${lobby.lobbyId} –±—ã–ª–æ —Å–æ–±—Ä–∞–Ω–æ`,
        {
          disable_notification: true,
        }
      );
    } catch (error) {}
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞
  lobby.results[0] = {};
  lobby.resultsSum[0] = {};

  for (let i = 0; i < lobby.rivals.length; i++) {
    const userId = lobby.rivals[i];
    lobby.results[0][userId] = [];
    lobby.resultsSum[0][userId] = 0;
  }

  ctx.session.state.lobby = lobby;

  await sendStickers(ctx);

  // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
  // –í—ã–±–∏—Ä–∞–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
  const _lobby = ctx.session.state.lobby;
  const players = _lobby.rivals
    .map((item) => ({
      userId: item,
      resultsSum: _lobby.resultsSum[0][item],
    }))
    .sort((a, b) => b.resultsSum - a.resultsSum);

  let { resLobby, winner } = await playing2round(_lobby, players, 2, ctx);

  const reversedResults = {};
  for (let i = 0; i < resLobby.resultsSum.length; i++) {
    for (const [key, value] of Object.entries(resLobby.resultsSum[i])) {
      if (reversedResults[key]) {
        reversedResults[key] = [...reversedResults[key], value];
      } else {
        reversedResults[key] = [value];
      }
    }
  }

  const { pvpPercent } = await MainStats.findOne();
  const lobbyPrize = _lobby.prize * _lobby.size * (1 - pvpPercent / 100);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  _lobby.rivals.map((userId) =>
    bot.telegram.sendMessage(
      userId,
      `–†–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–±–±–∏ #${_lobby.lobbyId}

${
  userId === winner
    ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!
–í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${lobbyPrize.toFixed(2)} P`
    : `–í—ã–∏–≥—Ä–∞–ª ${winner === 0 ? "drow" : `${_lobby.rivalsLinks[winner]}`}
–í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: ${lobbyPrize.toFixed(2)} P`
}
   
${_lobby.rivals
  .map(
    (item, i) =>
      `${i + 1}. üë§ ${_lobby.rivalsLinks[item]} ‚ûñ ${
        _lobby.typeGame
      } ${reversedResults[item].join(` ${_lobby.typeGame} `)}`
  )
  .join("\n")}`,
      {
        parse_mode: "HTML",
      }
    )
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "completed"
  await PvpModel.updateOne(
    { lobbyId: _lobby.lobbyId },
    {
      winner,
      statusGame: "completed",
      results: resLobby.results,
      resultsSum: resLobby.resultsSum,
      reversedResults,
    }
  );

  // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
  const { mainBalance, pvp } = await User.findOne({ userId: winner });
  await User.updateOne(
    { userId: winner },
    {
      mainBalance: +(mainBalance + lobbyPrize).toFixed(2),
      pvp: {
        ...pvp,
        winCount: pvp.winCount + 1,
        winCash: +(pvp.winCash + lobbyPrize).toFixed(2),
      },
    }
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
  for (let i = 0; i < _lobby.rivals.length; i++) {
    const { pvp } = await User.findOne({ userId: _lobby.rivals[i] });
    await User.updateOne(
      { userId: _lobby.rivals[i] },
      {
        pvp: {
          ...pvp,
          count: pvp.count + 1,
          playCash: +(pvp.playCash + _lobby.prize).toFixed(2),
        },
      }
    );
  }

  await showMainView(ctx);
}

async function saveGameMainStats(lobby) {
  let type = null;
  const { pvpGames } = await MainStats.findOne();

  if (lobby.typeGame === "üé≤") {
    type = "dice";
  }
  if (lobby.typeGame === "‚öΩÔ∏è") {
    type = "football";
  }
  if (lobby.typeGame === "üé≥") {
    type = "bouling";
  }
  if (lobby.typeGame === "üèÄ") {
    type = "basketball";
  }
  if (lobby.typeGame === "üéØ") {
    type = "darts";
  }

  await MainStats.updateOne(
    {},
    {
      $inc: { "pvpGames.dice.countLobby": 1 },
      [`pvpGames.${type}.countCash`]: +(
        pvpGames[type].countCash +
        lobby.prize * lobby.rivals.length
      ).toFixed(2),
    }
  );
}

async function sendStickers(ctx, round, rivals) {
  const type = ctx.session.state.lobby.typeGame;

  // *************** DICE ***************
  if (type === "üé≤" && !round) {
    const lobby = ctx.session.state.lobby;
    for (let userId of lobby.rivals) {
      const resMsgArr = [];
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫
      for (let uid of lobby.rivals) {
        if (uid !== userId) {
          try {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –±—Ä–æ—Å–æ–∫–∏ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
              { parse_mode: "HTML", disable_notification: true }
            );
            resMsgArr.push(resMsg);
          } catch (error) {}
        } else {
          try {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`,
              {
                disable_notification: true,
              }
            );
            resMsgArr.push(resMsg);
          } catch (error) {}
        }
      }

      let dice1 = null;
      let dice2 = null;
      let dice3 = null;
      try {
        dice1 = await bot.telegram.sendDice(userId, {
          emoji: "üé≤",
          disable_notification: true,
        });
        dice2 = await bot.telegram.sendDice(userId, {
          emoji: "üé≤",
          disable_notification: true,
        });
        dice3 = await bot.telegram.sendDice(userId, {
          emoji: "üé≤",
          disable_notification: true,
        });
      } catch (error) {}

      const value1 = dice1.dice.value;
      const value2 = dice2.dice.value;
      const value3 = dice3.dice.value;

      const results = [value1, value2, value3];
      const resultsSum = value1 + value2 + value3;

      lobby.results[0] = { ...lobby.results[0], [userId]: results };
      lobby.resultsSum[0] = { ...lobby.resultsSum[0], [userId]: resultsSum };
      ctx.session.state.lobby = lobby;

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
      lobby.rivals.map((replyTo) => {
        if (replyTo === userId) return;
        try {
          bot.telegram.forwardMessage(replyTo, userId, dice1.message_id, {
            disable_notification: true,
          });
        } catch (error) {}
        try {
          bot.telegram.forwardMessage(replyTo, userId, dice2.message_id, {
            disable_notification: true,
          });
        } catch (error) {}
        try {
          bot.telegram.forwardMessage(replyTo, userId, dice3.message_id, {
            disable_notification: true,
          });
        } catch (error) {}
      });

      // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      await timeout(4000);

      for (let i = 0; i < resMsgArr.length; i++) {
        const userId = resMsgArr[i].chat.id;
        const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üé≤ ${resultsSum}`;
        bot.telegram.editMessageText(
          userId,
          resMsgArr[i].message_id,
          null,
          msg,
          {
            parse_mode: "HTML",
            disable_notification: true,
          }
        );
      }
    }
  }

  if (type === "üé≤" && round) {
    const lobby = ctx.session.state.lobby;
    for (let { userId } of rivals) {
      const resMsgArr = [];
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫
      for (let uid of lobby.rivals) {
        if (uid !== userId) {
          try {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –±—Ä–æ—Å–æ–∫–∏ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
              { parse_mode: "HTML", disable_notification: true }
            );
            resMsgArr.push(resMsg);
          } catch (error) {}
        } else {
          try {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`,
              {
                disable_notification: true,
              }
            );
            resMsgArr.push(resMsg);
          } catch (error) {}
        }
      }

      let dice1 = null;
      let dice2 = null;
      let dice3 = null;
      try {
        dice1 = await bot.telegram.sendDice(userId, {
          emoji: "üé≤",
          disable_notification: true,
        });
        dice2 = await bot.telegram.sendDice(userId, {
          emoji: "üé≤",
          disable_notification: true,
        });
        dice3 = await bot.telegram.sendDice(userId, {
          emoji: "üé≤",
          disable_notification: true,
        });
      } catch (error) {}

      const value1 = dice1.dice.value;
      const value2 = dice2.dice.value;
      const value3 = dice3.dice.value;

      const results = [value1, value2, value3];
      const resultsSum = value1 + value2 + value3;

      lobby.results[round - 1] = {
        ...lobby.results[round - 1],
        [userId]: results,
      };
      lobby.resultsSum[round - 1] = {
        ...lobby.resultsSum[round - 1],
        [userId]: resultsSum,
      };
      ctx.session.state.lobby = lobby;

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
      lobby.rivals.map((replyTo) => {
        if (replyTo === userId) return;
        try {
          bot.telegram.forwardMessage(replyTo, userId, dice1.message_id, {
            disable_notification: true,
          });
          bot.telegram.forwardMessage(replyTo, userId, dice2.message_id, {
            disable_notification: true,
          });
          bot.telegram.forwardMessage(replyTo, userId, dice3.message_id, {
            disable_notification: true,
          });
        } catch (error) {}
      });

      // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      await timeout(4000);

      for (let i = 0; i < resMsgArr.length; i++) {
        const userId = resMsgArr[i].chat.id;
        const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üé≤ ${resultsSum}`;
        bot.telegram.editMessageText(
          userId,
          resMsgArr[i].message_id,
          null,
          msg,
          {
            parse_mode: "HTML",
            disable_notification: true,
          }
        );
      }
    }
  }

  // *************** FOOTBALL ***************

  if (type === "‚öΩÔ∏è" && !round) {
    for (let i = 0; i < 6; i++) {
      const lobby = ctx.session.state.lobby;
      for (let userId of lobby.rivals) {
        const resMsgArr = [];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –±—å–µ—Ç –º—è—á
        for (let uid of lobby.rivals) {
          if (uid !== userId) {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –ø–æ –≤–æ—Ä–æ—Ç–∞–º –±—å–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
                { parse_mode: "HTML", disable_notification: true }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          } else {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –≤–∞—à —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º`,
                {
                  disable_notification: true,
                }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          }
        }

        let diceMsg = null;
        try {
          diceMsg = await bot.telegram.sendDice(userId, {
            emoji: "‚öΩÔ∏è",
            disable_notification: true,
          });
        } catch (error) {}

        // –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let results = [...lobby.results[0][userId], diceMsg.dice.value];
        let resultsSum = lobby.resultsSum[0][userId];

        // –ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ–º –≥–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –æ—á–∫–æ
        if (diceMsg.dice.value >= 3) resultsSum++;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        lobby.results[0] = { ...lobby.results[0], [userId]: results };
        lobby.resultsSum[0] = { ...lobby.resultsSum[0], [userId]: resultsSum };
        ctx.session.state.lobby = lobby;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        lobby.rivals.map((replyTo) => {
          if (replyTo === userId) return;
          try {
            bot.telegram.forwardMessage(replyTo, userId, diceMsg.message_id, {
              disable_notification: true,
            });
          } catch (error) {}
        });

        // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        await timeout(4000);

        for (let i = 0; i < resMsgArr.length; i++) {
          const userId = resMsgArr[i].chat.id;
          const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ–≤: ‚öΩÔ∏è ${resultsSum}`;
          bot.telegram.editMessageText(
            userId,
            resMsgArr[i].message_id,
            null,
            msg,
            {
              parse_mode: "HTML",
              disable_notification: true,
            }
          );
        }
      }
    }
  }

  if (type === "‚öΩÔ∏è" && round) {
    for (let i = 0; i < 1; i++) {
      const lobby = ctx.session.state.lobby;
      for (let { userId } of rivals) {
        const resMsgArr = [];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –±—å–µ—Ç –º—è—á
        for (let uid of lobby.rivals) {
          if (uid !== userId) {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –ø–æ –≤–æ—Ä–æ—Ç–∞–º –±—å–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
                { parse_mode: "HTML", disable_notification: true }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          } else {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –≤–∞—à —É–¥–∞—Ä –ø–æ –≤–æ—Ä–æ—Ç–∞–º`,
                {
                  disable_notification: true,
                }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          }
        }

        let diceMsg = null;
        try {
          diceMsg = await bot.telegram.sendDice(userId, {
            emoji: "‚öΩÔ∏è",
            disable_notification: true,
          });
        } catch (error) {}

        // –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let results = [...lobby.results[round - 1][userId], diceMsg.dice.value];
        let resultsSum = lobby.resultsSum[round - 1][userId];

        // –ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ–º –≥–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –æ—á–∫–æ
        if (diceMsg.dice.value >= 3) resultsSum++;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        lobby.results[round - 1] = {
          ...lobby.results[round - 1],
          [userId]: results,
        };
        lobby.resultsSum[round - 1] = {
          ...lobby.resultsSum[round - 1],
          [userId]: resultsSum,
        };
        ctx.session.state.lobby = lobby;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        lobby.rivals.map((replyTo) => {
          if (replyTo === userId) return;
          try {
            bot.telegram.forwardMessage(replyTo, userId, diceMsg.message_id, {
              disable_notification: true,
            });
          } catch (error) {}
        });

        // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        await timeout(4000);

        for (let i = 0; i < resMsgArr.length; i++) {
          const userId = resMsgArr[i].chat.id;
          const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –≥–æ–ª–æ–≤: ‚öΩÔ∏è ${resultsSum}`;
          bot.telegram.editMessageText(
            userId,
            resMsgArr[i].message_id,
            null,
            msg,
            {
              parse_mode: "HTML",
              disable_notification: true,
            }
          );
        }
      }
    }
  }

  // *************** BOULING ***************

  if (type === "üé≥" && !round) {
    const lobby = ctx.session.state.lobby;
    for (let userId of lobby.rivals) {
      const resMsgArr = [];
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫
      for (let uid of lobby.rivals) {
        try {
          if (uid !== userId) {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –±—Ä–æ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
              { parse_mode: "HTML", disable_notification: true }
            );
            resMsgArr.push(resMsg);
          } else {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –≤–∞—à–∏ –±—Ä–æ—Å–∫–∏`,
              {
                disable_notification: true,
              }
            );
            resMsgArr.push(resMsg);
          }
        } catch (error) {}
      }

      let dice1 = null;
      let dice2 = null;
      let dice3 = null;
      try {
        dice1 = await bot.telegram.sendDice(userId, {
          emoji: "üé≥",
          disable_notification: true,
        });
        dice2 = await bot.telegram.sendDice(userId, {
          emoji: "üé≥",
          disable_notification: true,
        });
        dice3 = await bot.telegram.sendDice(userId, {
          emoji: "üé≥",
          disable_notification: true,
        });
      } catch (error) {}

      const value1 = dice1.dice.value === 2 ? 1 : dice1.dice.value;
      const value2 = dice2.dice.value === 2 ? 1 : dice2.dice.value;
      const value3 = dice3.dice.value === 2 ? 1 : dice3.dice.value;

      const results = [value1, value2, value3];
      const resultsSum = value1 + value2 + value3;

      lobby.results[0] = { ...lobby.results[0], [userId]: results };
      lobby.resultsSum[0] = { ...lobby.resultsSum[0], [userId]: resultsSum };
      ctx.session.state.lobby = lobby;

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
      lobby.rivals.map((replyTo) => {
        if (replyTo === userId) return;
        try {
          bot.telegram.forwardMessage(replyTo, userId, dice1.message_id, {
            disable_notification: true,
          });
          bot.telegram.forwardMessage(replyTo, userId, dice2.message_id, {
            disable_notification: true,
          });
          bot.telegram.forwardMessage(replyTo, userId, dice3.message_id, {
            disable_notification: true,
          });
        } catch (error) {}
      });

      // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      await timeout(3500);

      for (let i = 0; i < resMsgArr.length; i++) {
        const userId = resMsgArr[i].chat.id;
        const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üé≥ ${resultsSum}`;
        bot.telegram.editMessageText(
          userId,
          resMsgArr[i].message_id,
          null,
          msg,
          {
            parse_mode: "HTML",
            disable_notification: true,
          }
        );
      }
    }
  }

  if (type === "üé≥" && round) {
    const lobby = ctx.session.state.lobby;
    for (let { userId } of rivals) {
      const resMsgArr = [];
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫
      for (let uid of lobby.rivals) {
        try {
          if (uid !== userId) {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –±—Ä–æ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
              { parse_mode: "HTML", disable_notification: true }
            );
            resMsgArr.push(resMsg);
          } else {
            const resMsg = await bot.telegram.sendMessage(
              uid,
              `–°–µ–π—á–∞—Å –≤–∞—à–∏ –±—Ä–æ—Å–∫–∏`,
              {
                disable_notification: true,
              }
            );
            resMsgArr.push(resMsg);
          }
        } catch (error) {}
      }

      let dice1 = null;
      let dice2 = null;
      let dice3 = null;
      try {
        dice1 = await bot.telegram.sendDice(userId, {
          emoji: "üé≥",
          disable_notification: true,
        });
        dice2 = await bot.telegram.sendDice(userId, {
          emoji: "üé≥",
          disable_notification: true,
        });
        dice3 = await bot.telegram.sendDice(userId, {
          emoji: "üé≥",
          disable_notification: true,
        });
      } catch (error) {}

      const value1 = dice1.dice.value === 2 ? 1 : dice1.dice.value;
      const value2 = dice2.dice.value === 2 ? 1 : dice2.dice.value;
      const value3 = dice3.dice.value === 2 ? 1 : dice3.dice.value;

      const results = [value1, value2, value3];
      const resultsSum = value1 + value2 + value3;

      lobby.results[round - 1] = {
        ...lobby.results[round - 1],
        [userId]: results,
      };
      lobby.resultsSum[round - 1] = {
        ...lobby.resultsSum[round - 1],
        [userId]: resultsSum,
      };
      ctx.session.state.lobby = lobby;

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
      lobby.rivals.map((replyTo) => {
        if (replyTo === userId) return;
        try {
          bot.telegram.forwardMessage(replyTo, userId, dice1.message_id, {
            disable_notification: true,
          });
          bot.telegram.forwardMessage(replyTo, userId, dice2.message_id, {
            disable_notification: true,
          });
          bot.telegram.forwardMessage(replyTo, userId, dice3.message_id, {
            disable_notification: true,
          });
        } catch (error) {}
      });

      // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      await timeout(3500);

      for (let i = 0; i < resMsgArr.length; i++) {
        const userId = resMsgArr[i].chat.id;
        const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üé≥ ${resultsSum}`;
        bot.telegram.editMessageText(
          userId,
          resMsgArr[i].message_id,
          null,
          msg,
          {
            parse_mode: "HTML",
            disable_notification: true,
          }
        );
      }
    }
  }

  // *************** BASKETBALL ***************

  if (type === "üèÄ" && !round) {
    for (let i = 0; i < 4; i++) {
      const lobby = ctx.session.state.lobby;
      for (let userId of lobby.rivals) {
        const resMsgArr = [];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –±—å–µ—Ç –º—è—á
        for (let uid of lobby.rivals) {
          if (uid !== userId) {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –±—Ä–æ—Å–æ–∫ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
                { parse_mode: "HTML", disable_notification: true }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          } else {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`,
                {
                  disable_notification: true,
                }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          }
        }

        let diceMsg = null;
        try {
          diceMsg = await bot.telegram.sendDice(userId, {
            emoji: "üèÄ",
            disable_notification: true,
          });
        } catch (error) {}

        // –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let results = [...lobby.results[0][userId], diceMsg.dice.value];
        let resultsSum = lobby.resultsSum[0][userId];

        // –ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ–º –≥–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –æ—á–∫–æ
        if (diceMsg.dice.value >= 4) resultsSum++;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        lobby.results[0] = { ...lobby.results[0], [userId]: results };
        lobby.resultsSum[0] = { ...lobby.resultsSum[0], [userId]: resultsSum };
        ctx.session.state.lobby = lobby;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        lobby.rivals.map((replyTo) => {
          if (replyTo === userId) return;
          try {
            bot.telegram.forwardMessage(replyTo, userId, diceMsg.message_id, {
              disable_notification: true,
            });
          } catch (error) {}
        });

        // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        await timeout(3500);

        for (let i = 0; i < resMsgArr.length; i++) {
          const userId = resMsgArr[i].chat.id;
          const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üèÄ ${resultsSum}`;
          bot.telegram.editMessageText(
            userId,
            resMsgArr[i].message_id,
            null,
            msg,
            {
              parse_mode: "HTML",
              disable_notification: true,
            }
          );
        }
      }
    }
  }

  if (type === "üèÄ" && round) {
    for (let i = 0; i < 1; i++) {
      const lobby = ctx.session.state.lobby;
      for (let { userId } of rivals) {
        const resMsgArr = [];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –±—å–µ—Ç –º—è—á
        for (let uid of lobby.rivals) {
          if (uid !== userId) {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –±—Ä–æ—Å–æ–∫ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
                { parse_mode: "HTML", disable_notification: true }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          } else {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`,
                {
                  disable_notification: true,
                }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          }
        }

        let diceMsg = null;
        try {
          diceMsg = await bot.telegram.sendDice(userId, {
            emoji: "üèÄ",
            disable_notification: true,
          });
        } catch (error) {}

        // –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let results = [...lobby.results[round - 1][userId], diceMsg.dice.value];
        let resultsSum = lobby.resultsSum[round - 1][userId];

        // –ï—Å–ª–∏ –∑–∞–±–∏–≤–∞–µ–º –≥–æ–ª, –¥–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫—É –æ—á–∫–æ
        if (diceMsg.dice.value >= 4) resultsSum++;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        lobby.results[round - 1] = {
          ...lobby.results[round - 1],
          [userId]: results,
        };
        lobby.resultsSum[round - 1] = {
          ...lobby.resultsSum[round - 1],
          [userId]: resultsSum,
        };
        ctx.session.state.lobby = lobby;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        lobby.rivals.map((replyTo) => {
          if (replyTo === userId) return;
          try {
            bot.telegram.forwardMessage(replyTo, userId, diceMsg.message_id, {
              disable_notification: true,
            });
          } catch (error) {}
        });

        // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        await timeout(3500);

        for (let i = 0; i < resMsgArr.length; i++) {
          const userId = resMsgArr[i].chat.id;
          const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üèÄ ${resultsSum}`;
          bot.telegram.editMessageText(
            userId,
            resMsgArr[i].message_id,
            null,
            msg,
            {
              parse_mode: "HTML",
              disable_notification: true,
            }
          );
        }
      }
    }
  }

  // *************** DARTS ***************

  if (type === "üéØ" && !round) {
    for (let i = 0; i < 4; i++) {
      const lobby = ctx.session.state.lobby;
      for (let userId of lobby.rivals) {
        const resMsgArr = [];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –±—å–µ—Ç –º—è—á
        for (let uid of lobby.rivals) {
          if (uid !== userId) {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –±—Ä–æ—Å–æ–∫ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
                { parse_mode: "HTML", disable_notification: true }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          } else {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`,
                {
                  disable_notification: true,
                }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          }
        }

        let diceMsg = null;
        try {
          diceMsg = await bot.telegram.sendDice(userId, {
            emoji: "üéØ",
            disable_notification: true,
          });
        } catch (error) {}

        // –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let results = [...lobby.results[0][userId], diceMsg.dice.value];
        let resultsSum = lobby.resultsSum[0][userId];

        resultsSum += diceMsg.dice.value - 1;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        lobby.results[0] = { ...lobby.results[0], [userId]: results };
        lobby.resultsSum[0] = { ...lobby.resultsSum[0], [userId]: resultsSum };
        ctx.session.state.lobby = lobby;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        lobby.rivals.map((replyTo) => {
          if (replyTo === userId) return;
          try {
            bot.telegram.forwardMessage(replyTo, userId, diceMsg.message_id, {
              disable_notification: true,
            });
          } catch (error) {}
        });

        // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        await timeout(3000);

        for (let i = 0; i < resMsgArr.length; i++) {
          const userId = resMsgArr[i].chat.id;
          const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üéØ ${resultsSum}`;
          bot.telegram.editMessageText(
            userId,
            resMsgArr[i].message_id,
            null,
            msg,
            {
              parse_mode: "HTML",
              disable_notification: true,
            }
          );
        }
      }
    }
  }

  if (type === "üéØ" && round) {
    for (let i = 0; i < 1; i++) {
      const lobby = ctx.session.state.lobby;
      for (let { userId } of rivals) {
        const resMsgArr = [];
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –±—å–µ—Ç –º—è—á
        for (let uid of lobby.rivals) {
          if (uid !== userId) {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –±—Ä–æ—Å–æ–∫ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${lobby.rivalsLinks[userId]}`,
                { parse_mode: "HTML", disable_notification: true }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          } else {
            try {
              const resMsg = await bot.telegram.sendMessage(
                uid,
                `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`,
                {
                  disable_notification: true,
                }
              );
              resMsgArr.push(resMsg);
            } catch (error) {}
          }
        }

        let diceMsg = null;
        try {
          diceMsg = await bot.telegram.sendDice(userId, {
            emoji: "üéØ",
            disable_notification: true,
          });
        } catch (error) {}

        // –ë–µ—Ä–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let results = [...lobby.results[round - 1][userId], diceMsg.dice.value];
        let resultsSum = lobby.resultsSum[round - 1][userId];

        resultsSum += diceMsg.dice.value - 1;

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
        lobby.results[round - 1] = {
          ...lobby.results[round - 1],
          [userId]: results,
        };
        lobby.resultsSum[round - 1] = {
          ...lobby.resultsSum[round - 1],
          [userId]: resultsSum,
        };
        ctx.session.state.lobby = lobby;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
        lobby.rivals.map((replyTo) => {
          if (replyTo === userId) return;
          try {
            bot.telegram.forwardMessage(replyTo, userId, diceMsg.message_id, {
              disable_notification: true,
            });
          } catch (error) {}
        });

        // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        await timeout(3000);

        for (let i = 0; i < resMsgArr.length; i++) {
          const userId = resMsgArr[i].chat.id;
          const msg = `${resMsgArr[i].text}\n–û–±—â–µ–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤: üéØ ${resultsSum}`;
          bot.telegram.editMessageText(
            userId,
            resMsgArr[i].message_id,
            null,
            msg,
            {
              parse_mode: "HTML",
              disable_notification: true,
            }
          );
        }
      }
    }
  }
}

async function playing2round(lobby, players, round, ctx) {
  const players2round = [players[0]];
  const finallPlayers = [];

  // –í—ã–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
  for (let i = 1; i < players.length; i++) {
    if (players[i].resultsSum === players[0].resultsSum) {
      players2round.push(players[i]);
    }
  }

  if (players2round.length === 1) {
    return { resLobby: lobby, winner: players[0].userId };
  }

  // –ï—Å–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  if (players2round.length > 1) {
    const reversedResults = {};
    for (let i = 0; i < lobby.resultsSum.length; i++) {
      for (const [key, value] of Object.entries(lobby.resultsSum[i])) {
        if (reversedResults[key]) {
          reversedResults[key] = [...reversedResults[key], value];
        } else {
          reversedResults[key] = [value];
        }
      }
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –≤—Ç–æ—Ä–æ–º —Ä–∞—É–Ω–¥–µ
    lobby.rivals.map((userId) => {
      try {
        bot.telegram.sendMessage(
          userId,
          `${lobby.typeGame} –õ–æ–±–±–∏ #${lobby.lobbyId} ‚ûñ ${round} —Ä–∞—É–Ω–¥

–ò–≥—Ä–∞—é—Ç:
${players2round
  .map(
    (item, i) =>
      `${i + 1}. üë§ ${lobby.rivalsLinks[item.userId]} ‚ûñ ${
        lobby.typeGame
      } ${reversedResults[item.userId].join(` ${lobby.typeGame} `)}`
  )
  .join("\n")}`,
          { parse_mode: "HTML", disable_notification: true }
        );
      } catch (error) {}
    });

    lobby.results[round - 1] = {};
    lobby.resultsSum[round - 1] = {};

    for (let userId of lobby.rivals) {
      lobby.results[round - 1][userId] = [];
      lobby.resultsSum[round - 1][userId] = 0;
    }

    ctx.session.state.lobby = lobby;

    await sendStickers(ctx, round, players2round);

    const _lobby = ctx.session.state.lobby;

    for (let { userId } of players2round) {
      finallPlayers.push({
        userId,
        resultsSum: _lobby.resultsSum[round - 1][userId],
      });
    }

    const sortedPlayers = finallPlayers.sort(
      (a, b) => b.resultsSum - a.resultsSum
    );

    return await playing2round(_lobby, sortedPlayers, round++, ctx);
  }
}

function separate(arr) {
  let cols = 1;
  let rows = 5;

  const rowsItems = [];
  for (let i = 0, j = arr.length; i < j; i += cols) {
    const row = arr.slice(i, i + cols);
    rowsItems.push(row);
  }

  const pagesItems = [];
  for (let i = 0, j = rowsItems.length; i < j; i += rows) {
    const page = rowsItems.slice(i, i + rows);
    pagesItems.push(page);
  }

  return pagesItems;
}

function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

function setState(ctx) {
  return new Promise((resolve) => {
    ctx.session.state.actionStatus = true;
    resolve();
  });
}

function removeState(ctx) {
  return new Promise((resolve) => {
    ctx.session.state.actionStatus = false;
    resolve();
  });
}

module.exports = { pvpAllGames };
