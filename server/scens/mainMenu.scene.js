const { bot } = require("../init/startBot");
const { commandStart, showMainMenu } = require("../commands/start");

const User = require("../models/user");
const Banker = require("../models/banker");

function mainMenuActions(scene) {
  scene.hears("‚úÖ –°–æ–≥–ª–∞—à–∞—é—Å—å", async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }

    await User.updateOne({ userId: ctx.from.id }, { rules: true });
    await showMainMenu(ctx);
  });

  scene.hears("üë§ –°–æ–ª–æ", async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }

    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    const extra = {
      inline_keyboard: [
        [
          { text: "–ò–≥—Ä–∞—Ç—å üé≤", callback_data: "playGame üé≤" },
          { text: "–ò–≥—Ä–∞—Ç—å ‚öΩÔ∏è", callback_data: "playGame ‚öΩÔ∏è" },
          { text: "–ò–≥—Ä–∞—Ç—å üé∞", callback_data: "playGame üé∞" },
        ],
      ],
    };

    const imgId =
      process.env.DEV !== "true"
        ? "AgACAgIAAxkBAAEL9IZhFCAwn_RSNa45MTOmnFSmwdGflAACjrYxG5IOoUjHX8Zz0VzrgAEAAwIAA3MAAyAE"
        : "AgACAgIAAxkBAAJNt2EUIJwUTZttWomM3YAapaRDXrWeAAJ_tzEbVqCgSJKNIiO7FoYrAQADAgADcwADIAQ";

    try {
      ctx.session.state.activeBoard = await bot.telegram.sendPhoto(
        ctx.from.id,
        imgId,
        {
          caption: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ä–µ–∂–∏–º! –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É`,
          reply_markup: extra,
        }
      );
    } catch (error) {}
  });

  scene.hears("üë• –ü–≤–ü", async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }

    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    await ctx.scene.enter("pvpAllGames");
  });

  scene.action(/(?:playGame)/, async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }

    const emoji = ctx.update.callback_query.data.split(" ")[1];

    ctx.session.state = {
      ...ctx.session.state,
      typeGame: emoji,
      typeBalance: "mainBalance",
    };

    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    if (emoji === "üé≤") {
      return await ctx.scene.enter("diceGame");
    }
    if (emoji === "‚öΩÔ∏è") {
      return await ctx.scene.enter("footballGame");
    }
    if (emoji === "üé∞") {
      return await ctx.scene.enter("slotGame");
    }
  });

  scene.hears("üì± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }
    await ctx.scene.enter("lkMenu");
  });

  scene.hears("–°–ø–æ—Ä—Ç", async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }
    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}
    await ctx.scene.enter("sportMenu");
  });

  scene.hears("‚ÑπÔ∏è –ò–Ω—Ñ–æ", async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }
    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    try {
      await bot.telegram.sendMessage(
        ctx.from.id,
        `Lucky Cat Games - –±–æ—Ç —Å –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –º–µ—Ö–∞–Ω–∏–∫–µ —Å–º–∞–π–ª–æ–≤ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º.
  –ò–º–µ–Ω–Ω–æ –ø–æ-—ç—Ç–æ–º—É –í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –∏—Å–∫–ª—é—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∫–∏—Ö-–ª–∏–±–æ –Ω–∞–∫—Ä—É—Ç–æ–∫ –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ —á—Ç–æ –≤–∞–º –≤—ã–ø–∞–¥–µ—Ç. –í—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º —Å–º–∞–π–ª (–º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é, –Ω–æ –¥–ª—è –í–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ —Å–¥–µ–ª–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞) –∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–ø–∞–¥–µ–Ω–∏—è - –º—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –í–∞–º –≤—ã–∏–≥—Ä—ã—à. 
  
  üí¶ –í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –Ω–∞ –¥–µ–º–æ —Å—á–µ—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û.
  üî• –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ QIWI, –∫–∞—Ä—Ç—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏ –±–∞–Ω–∫–æ–≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.
  ‚ö†Ô∏è –î–µ–Ω—å–≥–∏ —Å –¥–µ–º–æ-—Å—á–µ—Ç–∞ –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è. 
  
  –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?
  1) –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏;
  2) –î–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É;
  3) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–º–∞–π–ª–∏–∫.
  
  <a href="http://t.me/luckycatsupport">‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
  <a href="http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A">üí¨ –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏</a>
  <a href="http://t.me/luckycat_orders">üí≥ –ß–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–ª–∞—Ç–µ–∂–∏</a>`,
        {
          parse_mode: "HTML",
          disable_web_page_preview: true,
        }
      );
    } catch (error) {}
  });

  scene.hears("üí¨ –ß–∞—Ç / –ü–æ–¥–¥–µ—Ä–∂–∫–∞", async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }
    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    try {
      await ctx.reply(
        `<a href="tg://user?id=1498018305">üë®‚Äçüíª –ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
<a href="http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A">üí¨ –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏</a>`,
        {
          parse_mode: "HTML",
          disable_web_page_preview: true,
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
                  url: "http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A",
                },
                {
                  text: "–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                  url: "http://t.me/luckycatsupport",
                },
              ],
            ],
          },
        }
      );
    } catch (error) {}
  });

  scene.action(/–í—ã–ø–ª–∞—Ç–∏—Ç—å/g, async (ctx) => {
    if (!ctx.session.is_session) {
      await commandStart(ctx);
    }

    if (ctx.from.id !== 1498018305) return;

    const orderId = ctx.update.callback_query.data.split(":")[1];

    ctx.session.m_order_id = orderId;
    ctx.session.m_message_id = ctx.update.callback_query.message.message_id;

    await ctx.reply(`–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ${orderId}
–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É –ø–µ—Ä–µ–¥ —Å—Å—ã–ª–∫–æ–π
.https://telegram...`);
  });

  scene.hears(/\.https\:\/\/telegram\.me\/BTC_CHANGE_BOT/g, async (ctx) => {
    if (!ctx.session.is_session) {
      return await ctx.reply("–°–µ—Å—Å–∏—è –±—ã–ª–∞ –ø–æ—Ç–µ—Ä—è–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É –∑–∞–Ω–∞–≤–æ!");
    }

    if (ctx.from.id !== 1498018305) return;

    const code = ctx.update.message.text.split("https://")[1];

    const orderId = ctx.session.m_order_id;
    const messageId = ctx.session.m_message_id;
    const order = await Banker.findOne({ id: orderId });

    if (order.status === "succes") {
      return await ctx.reply("–ó–∞—è–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!");
    }

    await Banker.updateOne(
      { id: orderId },
      {
        order: "succes",
        code: code.replace("https://telegram.me/BTC_CHANGE_BOT?start=", ""),
      }
    );

    await bot.telegram.sendMessage(
      order.userId,
      `–í–∞—à —á–µ–∫ –Ω–∞ —Å—É–º–º—É: ${order.amount} P
https://${code}`
    );

    await bot.telegram.editMessageText(
      1498018305,
      messageId,
      null,
      `–ó–∞—è–≤–∫–∞ ‚Ññ${orderId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
–í—ã–≤–æ–¥ –Ω–∞ —Å—É–º–º—É ${order.amount} P —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω
–ß–µ–∫: https://${code}
üü¢ –í–´–ü–õ–ê–ß–ï–ù–û`,
      { disable_web_page_preview: true }
    );
  });
}

module.exports = { mainMenuActions };
