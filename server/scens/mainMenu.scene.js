const Scene = require("telegraf/scenes/base");
const Extra = require("telegraf/extra");
const Markup = require("telegraf/markup");

const showMainMenu = new Scene("showMainMenu");
showMainMenu.enter(async (ctx) => {
  return await ctx.reply(
    "–í—ã –≤–æ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    Extra.markup(
      Markup.keyboard([
        ["–ò–≥—Ä–∞—Ç—å üé≤", "–ò–≥—Ä–∞—Ç—å ‚öΩÔ∏è", "–ò–≥—Ä–∞—Ç—å üé∞"],
        ["PvP üé≤", "PvP üé≥", "PvP ‚öΩÔ∏è"],
        ["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üí¨ –ß–∞—Ç", "–ò–Ω—Ñ–æ"],
      ]).resize()
    )
  );
});

showMainMenu.hears(/(?:–ò–≥—Ä–∞—Ç—å)/, async (ctx) => {
  const emoji = ctx.update.message.text.replace("–ò–≥—Ä–∞—Ç—å ", "");
  ctx.session.state = { game: emoji };

  await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–≥—Ä–∞—Ç—å.",
    Extra.markup(
      Markup.keyboard([
        ["–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", "–î–µ–º–æ —Å—á–µ—Ç"],
        ["‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"],
      ]).resize()
    )
  );
});

showMainMenu.hears(/(?:PvP)/, async (ctx) => {
  const emoji = ctx.update.message.text.replace("PvP ", "");

  ctx.session.state = { typeGame: emoji, typeBalance: "mainBalance" };

  if (emoji === "üé≤") {
    return await ctx.scene.enter("pvpDiceGame");
  }
  if (emoji === "‚öΩÔ∏è") {
    return await ctx.scene.enter("pvpFootballGame");
  }
  if (emoji === "üé≥") {
    return await ctx.scene.enter("pvpBoulingGame");
  }
});

showMainMenu.hears("–û—Å–Ω–æ–≤–Ω–æ–π —Å—á–µ—Ç", async (ctx) => {
  const diceGame = ctx.session.state.game;

  ctx.session.state.activeGame = "mainGame";

  if (diceGame === "üé≤") {
    return await ctx.scene.enter("diceGame");
  }
  if (diceGame === "‚öΩÔ∏è") {
    return await ctx.scene.enter("footballGame");
  }
  if (diceGame === "üé∞") {
    return await ctx.scene.enter("slotGame");
  }
});

showMainMenu.hears("–î–µ–º–æ —Å—á–µ—Ç", async (ctx) => {
  const diceGame = ctx.session.state.game;

  ctx.session.state.activeGame = "demoGame";

  if (diceGame === "üé≤") {
    return await ctx.scene.enter("diceGame");
  }
  if (diceGame === "‚öΩÔ∏è") {
    return await ctx.scene.enter("footballGame");
  }
  if (diceGame === "üé∞") {
    return await ctx.scene.enter("slotGame");
  }
});

showMainMenu.hears("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
  return await ctx.scene.enter("lkMenu");
});

showMainMenu.hears("–ò–Ω—Ñ–æ", async (ctx) => {
  return await ctx.scene.enter("infoBlock");
});

showMainMenu.hears("üí¨ –ß–∞—Ç", async (ctx) => {
  ctx.reply(
    `–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –Ω–∞—à–µ–º –æ–±—â–µ–º —á–∞—Ç–µ
<a href="http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A">üí¨ –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏</a>`,
    {
      parse_mode: "HTML",
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
              url: "http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A",
            },
          ],
        ],
      },
    }
  );
});

showMainMenu.hears("‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", async (ctx) => {
  return await ctx.scene.enter("showMainMenu");
});

module.exports = { showMainMenu };
