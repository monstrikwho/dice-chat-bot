const Scene = require("telegraf/scenes/base");
const Extra = require("telegraf/extra");
const Markup = require("telegraf/markup");
const { bot } = require("../init/startBot");

const showMainMenu = new Scene("showMainMenu");
showMainMenu.enter(async (ctx) => {
  ctx.session.state = {};
  try {
    await ctx.reply(
      "–í—ã –≤–æ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
      Extra.markup(
        Markup.keyboard([
          ["–°–æ–ª–æ", "–ü–≤–ü"],
          ["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üí¨ –ß–∞—Ç", "–ò–Ω—Ñ–æ"],
        ]).resize()
      )
    );
  } catch (error) {}
});

mainMenuActions(showMainMenu);

function mainMenuActions(scene) {
  scene.hears("–°–æ–ª–æ", async (ctx) => {
    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    try {
      ctx.session.state.activeBoard = await ctx.reply(
        "–í—ã–±–µ—Ä–∏—Ç–µ solo –∏–≥—Ä—É",
        Extra.markup((m) =>
          m.inlineKeyboard([
            [
              m.callbackButton("–ò–≥—Ä–∞—Ç—å üé≤", "playGame üé≤"),
              m.callbackButton("–ò–≥—Ä–∞—Ç—å ‚öΩÔ∏è", "playGame ‚öΩÔ∏è"),
              m.callbackButton("–ò–≥—Ä–∞—Ç—å üé∞", "playGame üé∞"),
            ],
          ])
        )
      );
    } catch (error) {}
  });

  scene.hears("–ü–≤–ü", async (ctx) => {
    const activeBoard = ctx.session.state.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    await ctx.scene.enter("pvpAllGames");
  });

  scene.action(/(?:playGame)/, async (ctx) => {
    const emoji = ctx.update.callback_query.data.split(" ")[1];

    ctx.session.state = {
      ...ctx.session.state,
      typeGame: emoji,
      typeBalance: "mainBalance",
    };

    const activeBoard = ctx.session.state?.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    if (emoji === "üé≤") {
      return await ctx.scene.enter("diceGame");
    }
    if (emoji === "‚öΩÔ∏è") {
      return await ctx.scene.enter("footballGame");
    }
    if (emoji === "üé∞") {
      return await ctx.scene.enter("slotGame");
    }
  });

  scene.hears("–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
    const activeBoard = ctx.session.state?.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}
    return await ctx.scene.enter("lkMenu");
  });

  // scene.hears("–°–ø–æ—Ä—Ç", async (ctx) => {
  //   const activeBoard = ctx.session.state?.activeBoard;
  //   try {
  //     await ctx.deleteMessage(activeBoard.message_id);
  //   } catch (error) {}
  //   return await ctx.scene.enter("sportMenu");
  // });

  scene.hears("–ò–Ω—Ñ–æ", async (ctx) => {
    const activeBoard = ctx.session.state?.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    try {
      await bot.telegram.sendMessage(
        ctx.from.id,
        `Lucky Cat Games - –±–æ—Ç —Å –º–∏–Ω–∏-–∏–≥—Ä–∞–º–∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –º–µ—Ö–∞–Ω–∏–∫–µ —Å–º–∞–π–ª–æ–≤ –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º.
  –ò–º–µ–Ω–Ω–æ –ø–æ-—ç—Ç–æ–º—É –í—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∑—É –∏—Å–∫–ª—é—á–∏—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–∞–∫–∏—Ö-–ª–∏–±–æ –Ω–∞–∫—Ä—É—Ç–æ–∫ –∏–ª–∏ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ —Å –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ –º–æ–∂–µ–º –≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ —á—Ç–æ –≤–∞–º –≤—ã–ø–∞–¥–µ—Ç. –í—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º —Å–º–∞–π–ª (–º–æ–∂–Ω–æ –≤—Ä—É—á–Ω—É—é, –Ω–æ –¥–ª—è –í–∞—à–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞ —Å–¥–µ–ª–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞) –∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–ø–∞–¥–µ–Ω–∏—è - –º—ã –≤—ã–ø–ª–∞—á–∏–≤–∞–µ–º –í–∞–º –≤—ã–∏–≥—Ä—ã—à. 
  
  üí¶ –í—ã –º–æ–∂–µ—Ç–µ –∏–≥—Ä–∞—Ç—å –Ω–∞ –¥–µ–º–æ —Å—á–µ—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û.
  üî• –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ QIWI, –∫–∞—Ä—Ç—ã —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∏ –±–∞–Ω–∫–æ–≤ –¥—Ä—É–≥–∏—Ö —Å—Ç—Ä–∞–Ω.
  ‚ö†Ô∏è –î–µ–Ω—å–≥–∏ —Å –¥–µ–º–æ-—Å—á–µ—Ç–∞ –Ω–µ –≤—ã–≤–æ–¥—è—Ç—Å—è. 
  
  –ö–∞–∫ –∏–≥—Ä–∞—Ç—å?
  1) –í—ã–±–∏—Ä–∞–µ—Ç–µ —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏;
  2) –î–µ–ª–∞–µ—Ç–µ —Å—Ç–∞–≤–∫—É;
  3) –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–º–∞–π–ª–∏–∫.
  
  <a href="http://t.me/LuckyCatGames">‚ùì –ü–æ–¥–¥–µ—Ä–∂–∫–∞</a>
  <a href="http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A">üí¨ –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏</a>
  <a href="http://t.me/luckycat_orders">üí≥ –ß–∞—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –ø–ª–∞—Ç–µ–∂–∏</a>`,
        {
          parse_mode: "HTML",
          disable_web_page_preview: true,
        }
      );
    } catch (error) {}
  });

  scene.hears("üí¨ –ß–∞—Ç", async (ctx) => {
    const activeBoard = ctx.session.state?.activeBoard;
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}

    try {
      ctx.reply(
        `–í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –∏–≥—Ä–æ–∫–∞–º–∏ –≤ –Ω–∞—à–µ–º –æ–±—â–µ–º —á–∞—Ç–µ
    <a href="http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A">üí¨ –ß–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∏–≥—Ä–æ–∫–∞–º–∏</a>`,
        {
          parse_mode: "HTML",
          reply_markup: {
            inline_keyboard: [
              [
                {
                  text: "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç",
                  url: "http://t.me/joinchat/P0el-xuDN6g-ZsY7decv7A",
                },
              ],
            ],
          },
        }
      );
    } catch (error) {}
  });
}

module.exports = { showMainMenu, mainMenuActions };
