const { bot } = require("../init/startBot");
const User = require("../models/user");
const PvpGame = require("../models/pvpDiceGame");
const MainStats = require("../models/mainstats");

const Scene = require("telegraf/scenes/base");
const Extra = require("telegraf/extra");
const Markup = require("telegraf/markup");

const isNumber = require("is-number");

const pvpDiceGame = new Scene("pvpDiceGame");
pvpDiceGame.enter(async (ctx) => {
  await ctx.reply(
    "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º pvp-–∏–≥—Ä—ã",
    Extra.markup(Markup.keyboard([["üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"]]).resize())
  );

  await showMainView(ctx);
});

pvpDiceGame.action("–ú–æ–∏ –ª–æ–±–±–∏", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  await showMyLobby(ctx);

  await removeState(ctx);
});

pvpDiceGame.action(">", async (ctx) => {
  const { activeView, boardCountPage, boardMaxPages, actionStatus } =
    ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  if (boardCountPage + 1 <= boardMaxPages) {
    ctx.session.state.boardCountPage = boardCountPage + 1;
  } else {
    await removeState(ctx);
    return await ctx.answerCbQuery("–≠—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", true);
  }

  if (activeView === "main") {
    await showMainView(ctx);
  }
  if (activeView === "mylobby") {
    await showMyLobby(ctx);
  }

  await removeState(ctx);
});

pvpDiceGame.action("<", async (ctx) => {
  const { activeView, boardCountPage, actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  if (boardCountPage - 1 !== 0) {
    ctx.session.state.boardCountPage = boardCountPage - 1;
  } else {
    await removeState(ctx);
    return await ctx.answerCbQuery("–õ–µ–≤–µ–µ –Ω–µ–∫—É–¥–∞..", true);
  }

  if (activeView === "main") {
    await showMainView(ctx);
  }
  if (activeView === "mylobby") {
    await showMyLobby(ctx);
  }

  await removeState(ctx);
});

pvpDiceGame.action("–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  await showCreateLobbyStep1(ctx);

  await removeState(ctx);
});

pvpDiceGame.action("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  await showStats(ctx);

  await removeState(ctx);
});

pvpDiceGame.on("text", async (ctx) => {
  const msg = ctx.update.message.text;
  const { activeView, createLobbyStep, activeBoard } = ctx.session.state;

  if (activeView === "createlobby" && createLobbyStep === 2) {
    ctx.session.state.createLobbyRate = msg;
    return await showCreateLobbyStep3(ctx);
  }

  if (msg === "üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é") {
    try {
      await ctx.deleteMessage(activeBoard.message_id);
    } catch (error) {}
    await ctx.scene.enter("showMainMenu");
  }
});

pvpDiceGame.action(/(?:2 –∏–≥—Ä–æ–∫–∞|3 –∏–≥—Ä–æ–∫–∞|5 –∏–≥—Ä–æ–∫–æ–≤)/, async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  const createLobbyRoomSize = +ctx.update.callback_query.data.replace(
    /\W+/g,
    ""
  );
  ctx.session.state.createLobbyRoomSize = createLobbyRoomSize;

  await showCreateLobbyStep2(ctx);

  await removeState(ctx);
});

pvpDiceGame.action("–í—Å—Ç—É–ø–∏—Ç—å –≤ –ª–æ–±–±–∏", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  await joinToLobby(ctx);

  await removeState(ctx);
});

pvpDiceGame.action("–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", async (ctx) => {
  const { actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  await deleteLobby(ctx);

  await removeState(ctx);
});

pvpDiceGame.action("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", async (ctx) => {
  const { activeView, actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  ctx.session.state.boardCountPage = 1;

  if (activeView === "mylobby") {
    await showMyLobby(ctx);
  }
  if (activeView === "main") {
    await showMainView(ctx);
  }

  await removeState(ctx);
});

pvpDiceGame.action("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", async (ctx) => {
  const { activeView, createLobbyStep, actionStatus } = ctx.session.state;

  if (actionStatus) return;
  await setState(ctx);

  if (activeView === "createlobby" && createLobbyStep === 1) {
    ctx.session.state.boardCountPage = 1;
    await showMyLobby(ctx);
  }
  if (activeView === "createlobby" && createLobbyStep === 2) {
    await showCreateLobbyStep1(ctx);
  }
  if (
    activeView === "mylobby" ||
    activeView === "showStats" ||
    activeView === "playwithrials"
  ) {
    ctx.session.state.boardCountPage = 1;
    await showMainView(ctx);
  }
  if (activeView === "select-mylobby") {
    await showMyLobby(ctx);
  }

  await removeState(ctx);
});

pvpDiceGame.action(/./, async (ctx) => {
  const { activeView, actionStatus } = ctx.session.state;
  const btnData = ctx.update.callback_query.data;

  if (actionStatus) return;
  await setState(ctx);

  if (btnData.indexOf("lobby_id:") >= 0) {
    const lobbyId = btnData.replace("lobby_id:", "");
    ctx.session.state.lobbyId = lobbyId;

    if (activeView === "mylobby") {
      await selectMyLobby(ctx);
    }

    if (activeView === "main") {
      await showSelectRivals(ctx);
    }
  }

  await removeState(ctx);
});

async function showMainView(ctx) {
  const {
    typeGame,
    typeBalance,
    activeBoard,
    boardCountPage = 1,
    photoMessage,
  } = ctx.session.state;
  ctx.session.state.activeView = "main";

  const pvpGames = await PvpGame.find({
    typeGame,
    typeBalance,
    statusGame: "waiting",
    rivals: {
      $ne: ctx.from.id,
    },
  });

  const user = await User.findOne({ userId: ctx.from.id });

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}
  try {
    await ctx.deleteMessage(photoMessage.message_id);
  } catch (error) {}

  const newPhotoMessage = await bot.telegram.sendPhoto(
    ctx.from.id,
    "AgACAgIAAxkBAAIWbGCZQ2YINkXL_u5KDZMtsXr3ylGRAAJlsjEbmEzQSByhDFghgy-XgQuaoi4AAwEAAwIAA20AA1_5AQABHwQ"
  );

  ctx.session.state.photoMessage = newPhotoMessage;

  if (pvpGames.length === 0) {
    const newActiveBoard = await ctx.reply(
      `–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç—É —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤.
–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ª–æ–±–±–∏: "–ú–æ–∏ –ª–æ–±–±–∏" --> "–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏"

–í–∞—à –±–∞–ª–∞–Ω—Å: ${user[typeBalance]}p`,
      Extra.markup((m) =>
        m.inlineKeyboard([
          [
            m.callbackButton("–ú–æ–∏ –ª–æ–±–±–∏", "–ú–æ–∏ –ª–æ–±–±–∏"),
            m.callbackButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
            m.callbackButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
          ],
        ])
      )
    );
    ctx.session.state.activeBoard = newActiveBoard;
    return;
  }

  const boardGames = separate(pvpGames);
  const boardMaxPages = boardGames.length;

  const newActiveBoard = await ctx.reply(
    `–í—ã–±–µ—Ä–∏—Ç–µ –ª–æ–±–±–∏, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ.
–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ –ª–æ–±–±–∏: "–ú–æ–∏ –ª–æ–±–±–∏" --> "–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏"

–í–∞—à –±–∞–ª–∞–Ω—Å: ${user[typeBalance]}p

–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${boardCountPage}/${boardMaxPages}`,
    Extra.markup((m) =>
      m.inlineKeyboard([
        ...boardGames[boardCountPage - 1].map((cols) =>
          cols.map((game) =>
            m.callbackButton(
              `Lobby #${game.lobbyId} ‚ûñ ${game.prize}—Ä  üë§ [${game.rivals.length}/${game.size}]`,
              `lobby_id:${game.lobbyId}`
            )
          )
        ),
        [
          m.callbackButton("<", "<"),
          m.callbackButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
          m.callbackButton(">", ">"),
        ],
        [
          m.callbackButton("–ú–æ–∏ –ª–æ–±–±–∏", "–ú–æ–∏ –ª–æ–±–±–∏"),
          m.callbackButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        ],
      ])
    )
  );

  ctx.session.state = {
    ...ctx.session.state,
    activeBoard: newActiveBoard,
    boardGames,
    boardCountPage,
    boardMaxPages,
  };
}

async function showMyLobby(ctx) {
  const {
    typeGame,
    typeBalance,
    activeBoard,
    boardCountPage = 1,
    photoMessage,
  } = ctx.session.state;
  ctx.session.state.activeView = "mylobby";

  const pvpGames = await PvpGame.find({
    typeGame,
    typeBalance,
    statusGame: { $in: ["waiting", "final"] },
    rivals: ctx.from.id,
  });

  const userGames = await PvpGame.find({
    typeGame,
    typeBalance,
    statusGame: "waiting",
    creator: ctx.from.id,
  });

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}
  try {
    await ctx.deleteMessage(photoMessage.message_id);
  } catch (error) {}

  const newPhotoMessage = await bot.telegram.sendPhoto(
    ctx.from.id,
    "AgACAgIAAxkBAAIWbGCZQ2YINkXL_u5KDZMtsXr3ylGRAAJlsjEbmEzQSByhDFghgy-XgQuaoi4AAwEAAwIAA20AA1_5AQABHwQ"
  );

  ctx.session.state.photoMessage = newPhotoMessage;

  if (pvpGames.length === 0) {
    const newActiveBoard = await ctx.reply(
      "–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–π—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ª–æ–±–±–∏. –•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–µ?",
      Extra.markup((m) =>
        m.inlineKeyboard([
          [m.callbackButton("–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏", "–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏")],
          [m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")],
        ])
      )
    );
    ctx.session.state.activeBoard = newActiveBoard;
    return;
  }

  const boardGames = separate(pvpGames);
  const boardMaxPages = boardGames.length;

  const isCreate = (m) =>
    userGames.length === 10
      ? [[m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]]
      : [
          [m.callbackButton("–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏", "–°–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏")],
          [m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")],
        ];

  const newActiveBoard = await ctx.reply(
    `–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏: –≤–æ–π–¥–∏—Ç–µ –≤ –ª–æ–±–±–∏ --> "–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏" ${
      userGames.length === 10
        ? "\n–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–Ω–æ –ª–æ–±–±–∏. –ú–∞–∫—Å. 10—à—Ç"
        : ""
    }

–°—Ç—Ä–∞–Ω–∏—Ü–∞: ${boardCountPage}/${boardMaxPages}`,
    Extra.markup((m) =>
      m.inlineKeyboard([
        ...boardGames[boardCountPage - 1].map((cols) =>
          cols.map((game) => {
            const status =
              game.rivals.length === game.size ? "–ì–æ—Ç–æ–≤–æ" : "–û–∂–∏–¥–∞–Ω–∏–µ";
            return m.callbackButton(
              `Lobby #${game.lobbyId} ‚ûñ ${game.prize}—Ä  üë§ [${game.rivals.length}/${game.size}] ‚ûñ ${status}`,
              `lobby_id:${game.lobbyId}`
            );
          })
        ),
        [
          m.callbackButton("<", "<"),
          m.callbackButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
          m.callbackButton(">", ">"),
        ],
        ...isCreate(m),
      ])
    )
  );

  ctx.session.state = {
    ...ctx.session.state,
    activeBoard: newActiveBoard,
    boardGames,
    boardCountPage,
    boardMaxPages,
  };
}

async function selectMyLobby(ctx) {
  const { lobbyId, activeBoard } = ctx.session.state;
  ctx.session.state.activeView = "select-mylobby";

  const lobby = await PvpGame.findOne({ lobbyId });
  const { pvpPercent } = await MainStats.findOne();

  const lobbyPrize = lobby.prize * lobby.size * (1 - pvpPercent / 100);

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}

  if (lobby.statusGame === "waiting") {
    const newActiveBoard = await ctx.reply(
      `–õ–æ–±–±–∏ –µ—â–µ –Ω–µ —Å–æ–±—Ä–∞–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤..
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ª–æ–±–±–∏ —Å–æ–±–∏—Ä–µ—Ç—Å—è, –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫ –∏ –ø—Ä–∏—à–ª–µ—Ç –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã.

–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${lobbyPrize}p

üë§ –°–æ–ø–µ—Ä–Ω–∏–∫–∏:
${[...lobby.rivals, ...new Array(lobby.size - lobby.rivals.length)]
  .map((item, i) => {
    if (!item) return `${i + 1}. –û–∂–∏–¥–∞–Ω–∏–µ..`;
    return `${i + 1}. ${item}`;
  })
  .join("\n")}`,
      Extra.markup((m) =>
        m.inlineKeyboard([
          [
            m.callbackButton("–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏", "–í—ã–π—Ç–∏ –∏–∑ –ª–æ–±–±–∏"),
            m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"),
          ],
        ])
      )
    );
    ctx.session.state.activeBoard = newActiveBoard;
  }
}

async function showStats(ctx) {
  const { activeBoard } = ctx.session.state;
  ctx.session.state.activeView = "showStats";

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}

  const allUsers = await User.find({ "pvpDice.count": { $gte: 1 } })
    .sort({ "pvpDice.winCash": -1 })
    .limit(10);

  const user = await User.findOne({ userId: ctx.from.id });
  const latestGames = await PvpGame.find({
    rivals: ctx.from.id,
    statusGame: "completed",
  })
    .sort({ _id: -1 })
    .limit(10);

  ctx.session.state.activeBoard = await ctx.reply(
    `–û–ë–©–ò–ô –†–ï–ô–¢–ò–ù–ì
–í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: ‚Ññ${user.pvpDice.rating}
–í—ã —Å—ã–≥—Ä–∞–ª–∏ ${user.pvpDice.count} –Ω–∞ —Å—É–º–º—É ${user.pvpDice.playCash}p
–í–∞—à –æ–±—â–∏–π –≤—ã–∏–≥—Ä—ã—à: ${user.pvpDice.winCash}p

–¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤:
${allUsers
  .map(
    (item, i) =>
      `${i + 1}. ${item.userName ? "@" + item.userName : item.userId}`
  )
  .join("\n")}

–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã:
${latestGames
  .map((item) => {
    const status = item.winner === ctx.from.id ? "üü¢" : "üî¥";
    return `${status} üë§ ${item.rivals.length} üí∞ ${
      item.prize * item.rivals.length
    }p  üé≤ ${item.reversedResults[ctx.from.id].join(" üé≤ ")}`;
  })
  .join("\n")}`,
    Extra.markup((m) =>
      m.inlineKeyboard([
        [m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")],
      ])
    )
  );
}

async function showCreateLobbyStep1(ctx) {
  const { activeBoard } = ctx.session.state;
  ctx.session.state.activeView = "createlobby";
  ctx.session.state.createLobbyStep = 1;

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}

  const newActiveBoard = await ctx.reply(
    `Step 1/2 - –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤`,
    Extra.markup((m) =>
      m.inlineKeyboard([
        [
          m.callbackButton("2 –∏–≥—Ä–æ–∫–∞", "2 –∏–≥—Ä–æ–∫–∞"),
          m.callbackButton("3 –∏–≥—Ä–æ–∫–∞", "3 –∏–≥—Ä–æ–∫–∞"),
          m.callbackButton("5 –∏–≥—Ä–æ–∫–æ–≤", "5 –∏–≥—Ä–æ–∫–æ–≤"),
        ],
        [m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")],
      ])
    )
  );

  ctx.session.state.activeBoard = newActiveBoard;
}

async function showCreateLobbyStep2(ctx) {
  const { typeBalance, activeBoard } = ctx.session.state;
  ctx.session.state.activeView = "createlobby";
  ctx.session.state.createLobbyStep = 2;

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}

  const user = await User.findOne({ userId: ctx.from.id });

  const newActiveBoard = await ctx.reply(
    `Step 2/2 - –ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç —Å—Ç–∞–≤–∫—É
_–£–∫–∞–∑–∞–Ω–Ω–∞—è —Å—É–º–º–∞ –±—É–¥–µ—Ç —É–¥–µ—Ä–∂–∞–Ω–∞ —Å –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞_

–í–∞—à –±–∞–ª–∞–Ω—Å: ${user[typeBalance]}`,
    Extra.markup((m) =>
      m.inlineKeyboard([m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")])
    )
  );

  ctx.session.state.activeBoard = newActiveBoard;
}

async function showCreateLobbyStep3(ctx) {
  const { typeBalance, activeBoard, createLobbyRate } = ctx.session.state;

  if (!isNumber(createLobbyRate)) {
    return await ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã.");
  }

  const { minGameRate } = await MainStats.findOne();

  if (createLobbyRate < minGameRate) {
    return await ctx.reply(
      `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç ${minGameRate}‚ÇΩ`
    );
  }

  const user = await User.findOne({ userId: ctx.from.id });

  if (user[typeBalance] - createLobbyRate < 0) {
    return await ctx.reply(
      "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ª–æ–±–±–∏ c —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–∞–≤–∫–æ–π"
    );
  }

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}

  await createLobby(ctx);

  ctx.session.state = {
    ...ctx.session.state,
    createLobbyStep: 0,
  };
}

async function showSelectRivals(ctx) {
  const { activeBoard, lobbyId, typeBalance } = ctx.session.state;
  ctx.session.state.activeView = "playwithrials";

  const lobby = await PvpGame.findOne({ lobbyId });
  const user = await User.findOne({ userId: ctx.from.id });
  const { pvpPercent } = await MainStats.findOne();

  const lobbyPrize = lobby.prize * lobby.size * (1 - pvpPercent / 100);

  if (user[typeBalance] < lobby.prize) {
    return await ctx.answerCbQuery(
      "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–∞–Ω–Ω–æ–µ –ª–æ–±–±–∏.",
      true
    );
  }

  try {
    await ctx.deleteMessage(activeBoard.message_id);
  } catch (error) {}

  const newActiveBoard = await ctx.reply(
    `–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –ª–æ–±–±–∏.

–ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${lobbyPrize}p
    
–°–æ–ø–µ—Ä–Ω–∏–∫–∏:
${[...lobby.rivals, ...new Array(lobby.size - lobby.rivals.length)]
  .map((item, i) => {
    if (!item) return `${i + 1}. –û–∂–∏–¥–∞–Ω–∏–µ..`;
    return `${i + 1}. ${item}`;
  })
  .join("\n")}
`,
    Extra.markup((m) =>
      m.inlineKeyboard([
        [m.callbackButton("–í—Å—Ç—É–ø–∏—Ç—å –≤ –ª–æ–±–±–∏", "–í—Å—Ç—É–ø–∏—Ç—å –≤ –ª–æ–±–±–∏")],
        [m.callbackButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")],
      ])
    )
  );

  ctx.session.state = {
    ...ctx.session.state,
    activeBoard: newActiveBoard,
  };
}

async function joinToLobby(ctx) {
  const { lobbyId, typeBalance } = ctx.session.state;

  const lobby = await PvpGame.findOne({ lobbyId });

  if (lobby.rivals.indexOf(ctx.from.id) > 0) return;

  lobby.rivals.push(ctx.from.id);
  await PvpGame.updateOne({ lobbyId }, { rivals: lobby.rivals });

  const user = await User.findOne({ userId: ctx.from.id });
  await User.updateOne(
    { userId: ctx.from.id },
    { [typeBalance]: +(user[typeBalance] - lobby.prize).toFixed(2) }
  );

  await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ª–æ–±–±–∏.
–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–∞ —É–¥–µ—Ä–∂–∞–Ω–∞ —Å—É–º–º–∞: ${lobby.prize}p`);

  // –ï—Å–ª–∏ –≤—Å—Ç—É–ø–∏–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–≥—Ä–æ–∫ - –ó–ê–ü–£–°–ö–ê–ï–ú –ò–ì–†–£
  checkLastPlayer(lobby, ctx);
}

async function checkLastPlayer(lobby, ctx) {
  if (lobby.rivals.length !== lobby.size) {
    return await showMainView(ctx);
  }

  lobby.rivals.map((userId) =>
    bot.telegram.sendMessage(userId, `–õ–æ–±–±–∏ #${lobby.lobbyId} –±—ã–ª–æ —Å–æ–±—Ä–∞–Ω–æ`, {
      disable_notification: true,
    })
  );

  const { pvpGames, pvpPercent } = await MainStats.findOne();

  const lobbyPrize = lobby.prize * lobby.size * (1 - pvpPercent / 100);

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "pending"
  await PvpGame.updateOne(
    { lobbyId: lobby.lobbyId },
    {
      statusGame: "pending",
    }
  );
  await MainStats.updateOne(
    {},
    {
      $inc: { "pvpGames.dice.countLobby": 1 },
      "pvpGames.dice.countCash": +(
        pvpGames.dice.countCash + lobbyPrize
      ).toFixed(2),
    }
  );

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–ª—é—á–∏ –æ–±—ä–µ–∫—Ç–∞
  lobby.results[0] = {};
  lobby.resultsSum[0] = {};

  for (let userId of lobby.rivals) {
    lobby.results[0][userId] = [];
    lobby.resultsSum[0][userId] = 0;
  }

  // –î–µ–ª–∞–µ–º –±—Ä–æ—Å–æ–∫ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
  for (let userId of lobby.rivals) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –¥–µ–ª–∞–µ—Ç –±—Ä–æ—Å–æ–∫
    for (let uid of lobby.rivals) {
      if (uid !== userId) {
        await bot.telegram.sendMessage(
          uid,
          `–°–µ–π—á–∞—Å –±—Ä–æ—Å–æ–∫ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${userId}`,
          { disable_notification: true }
        );
      } else {
        await bot.telegram.sendMessage(uid, `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`, {
          disable_notification: true,
        });
      }
    }

    const dice1 = await bot.telegram.sendDice(userId, {
      emoji: "üé≤",
      disable_notification: true,
    });
    const dice2 = await bot.telegram.sendDice(userId, {
      emoji: "üé≤",
      disable_notification: true,
    });
    const dice3 = await bot.telegram.sendDice(userId, {
      emoji: "üé≤",
      disable_notification: true,
    });

    // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
    lobby.rivals.map((replyTo) => {
      if (replyTo === userId) return;
      bot.telegram.forwardMessage(replyTo, userId, dice1.message_id, {
        disable_notification: true,
      });
      bot.telegram.forwardMessage(replyTo, userId, dice2.message_id, {
        disable_notification: true,
      });
      bot.telegram.forwardMessage(replyTo, userId, dice3.message_id, {
        disable_notification: true,
      });
    });

    const value1 = dice1.dice.value;
    const value2 = dice2.dice.value;
    const value3 = dice3.dice.value;

    const results = [value1, value2, value3];
    const resultsSum = value1 + value2 + value3;

    lobby.results[0] = { ...lobby.results[0], [userId]: results };
    lobby.resultsSum[0] = { ...lobby.resultsSum[0], [userId]: resultsSum };

    // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    await timeout(4000);
  }

  // –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–≥—Ä–æ–∫–æ–≤
  // –í—ã–±–∏—Ä–∞–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
  const players = lobby.rivals
    .map((item) => ({
      userId: item,
      resultsSum: lobby.resultsSum[0][item],
    }))
    .sort((a, b) => b.resultsSum - a.resultsSum);

  let { resLobby, winner } = await playing2round(lobby, players);

  const reversedResults = {};
  for (let i = 0; i < resLobby.resultsSum.length; i++) {
    for (const [key, value] of Object.entries(resLobby.resultsSum[i])) {
      if (reversedResults[key]) {
        reversedResults[key] = [...reversedResults[key], value];
      } else {
        reversedResults[key] = [value];
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞–º –æ–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  lobby.rivals.map((userId) =>
    bot.telegram.sendMessage(
      userId,
      `–†–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–±–±–∏ #${lobby.lobbyId}

${
  userId === winner
    ? `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!
–í–∞—à –≤—ã–∏–≥—Ä—ã—à: ${lobbyPrize}p`
    : `–í—ã–∏–≥—Ä–∞–ª ${winner}
–í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª: ${lobbyPrize}p`
}
   
${lobby.rivals
  .map(
    (item, i) =>
      `${i + 1}. üë§ ${item} ‚ûñ üé≤ ${reversedResults[item].join(" üé≤ ")}`
  )
  .join("\n")}`
    )
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã –Ω–∞ "completed"
  await PvpGame.updateOne(
    { lobbyId: lobby.lobbyId },
    {
      winner,
      statusGame: "completed",
      results: resLobby.results,
      resultsSum: resLobby.resultsSum,
      reversedResults,
    }
  );

  // –ù–∞—á–∏—Å–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
  const { mainBalance, pvpDice } = await User.findOne({ userId: winner });
  await User.updateOne(
    { userId: winner },
    {
      mainBalance: +(mainBalance + lobbyPrize).toFixed(2),
      pvpDice: {
        ...pvpDice,
        winCount: pvpDice.winCount + 1,
        winCash: +(pvpDice.winCash + lobbyPrize).toFixed(2),
      },
    }
  );

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤
  for (let i = 0; i < lobby.rivals.length; i++) {
    const { pvpDice } = await User.findOne({ userId: lobby.rivals[i] });
    await User.updateOne(
      { userId: lobby.rivals[i] },
      {
        pvpDice: {
          ...pvpDice,
          count: pvpDice.count + 1,
          playCash: +(pvpDice.playCash + lobby.prize).toFixed(2),
        },
      }
    );
  }

  await showMainView(ctx);
}

async function playing2round(lobby, players, round = 2) {
  const players2round = [players[0]];
  const finallPlayers = [];

  // –í—ã–±–∏—Ä–∞–µ–º –∏–≥—Ä–æ–∫–æ–≤ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
  for (let i = 1; i < players.length; i++) {
    if (players[i].resultsSum === players[0].resultsSum) {
      players2round.push(players[i]);
    }
  }

  if (players2round.length === 1) {
    return { resLobby: lobby, winner: players[0].userId };
  }

  // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
  if (players2round.length > 1) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –≤—Ç–æ—Ä–æ–º —Ä–∞—É–Ω–¥–µ
    lobby.rivals.map((userId) =>
      bot.telegram.sendMessage(
        userId,
        `–õ–æ–±–±–∏ #${lobby.lobbyId} ‚ûñ ${round} —Ä–∞—É–Ω–¥

–ò–≥—Ä–∞—é—Ç:
${players2round.map((item, i) => `${i + 1}. üë§ ${item.userId}`).join("\n")}`,
        { disable_notification: true }
      )
    );

    lobby.results[round - 1] = {};
    lobby.resultsSum[round - 1] = {};

    for (let userId of lobby.rivals) {
      lobby.results[round - 1][userId] = [];
      lobby.resultsSum[round - 1][userId] = 0;
    }

    // –î–µ–ª–∞–µ–º –±—Ä–æ—Å–æ–∫ –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É
    for (let { userId } of players2round) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –∏–≥—Ä–æ–∫—É —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, –∫—Ç–æ –±—å–µ—Ç –º—è—á
      for (let uid of lobby.rivals) {
        if (uid !== userId) {
          await bot.telegram.sendMessage(
            uid,
            `–ë—Ä–æ—Å–æ–∫ –¥–µ–ª–∞–µ—Ç –∏–≥—Ä–æ–∫: ${userId}`,
            { disable_notification: true }
          );
        } else {
          await bot.telegram.sendMessage(uid, `–°–µ–π—á–∞—Å –≤–∞—à –±—Ä–æ—Å–æ–∫`, {
            disable_notification: true,
          });
        }
      }

      const diceMsg1 = await bot.telegram.sendDice(userId, {
        emoji: "üé≤",
        disable_notification: true,
      });
      const diceMsg2 = await bot.telegram.sendDice(userId, {
        emoji: "üé≤",
        disable_notification: true,
      });
      const diceMsg3 = await bot.telegram.sendDice(userId, {
        emoji: "üé≤",
        disable_notification: true,
      });

      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—Ä–æ—Å–∫–∞
      lobby.rivals.map((replyTo) => {
        if (replyTo === userId) return;
        bot.telegram.forwardMessage(replyTo, userId, diceMsg1.message_id, {
          disable_notification: true,
        });
        bot.telegram.forwardMessage(replyTo, userId, diceMsg2.message_id, {
          disable_notification: true,
        });
        bot.telegram.forwardMessage(replyTo, userId, diceMsg3.message_id, {
          disable_notification: true,
        });
      });

      const value1 = diceMsg1.dice.value;
      const value2 = diceMsg2.dice.value;
      const value3 = diceMsg3.dice.value;

      const results = [value1, value2, value3];
      const resultsSum = value1 + value2 + value3;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã
      lobby.results[round - 1] = {
        ...lobby.results[round - 1],
        [userId]: results,
      };
      lobby.resultsSum[round - 1] = {
        ...lobby.resultsSum[round - 1],
        [userId]: resultsSum,
      };

      // –û–∂–∏–¥–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      await timeout(4000);
    }

    for (let { userId } of players2round) {
      finallPlayers.push({
        userId,
        resultsSum: lobby.resultsSum[round - 1][userId],
      });
    }

    const sortedPlayers = finallPlayers.sort(
      (a, b) => b.resultsSum - a.resultsSum
    );

    return await playing2round(lobby, sortedPlayers);
  }
}

async function createLobby(ctx) {
  const { typeGame, typeBalance, createLobbyRate, createLobbyRoomSize } =
    ctx.session.state;

  const { pvpGames } = await MainStats.findOne();
  await MainStats.updateOne({}, { $inc: { "pvpGames.prevLobbyId": 1 } });

  const pvpGame = new PvpGame({
    lobbyId: pvpGames.prevLobbyId + 1,
    typeGame,
    typeBalance,
    statusGame: "waiting",
    size: createLobbyRoomSize,
    prize: createLobbyRate,
    rivals: [ctx.from.id],
    creator: ctx.from.id,
  });
  await pvpGame.save();

  // UPDATE USER BALANCE
  const user = await User.findOne({ userId: ctx.from.id });
  await User.updateOne(
    { userId: ctx.from.id },
    { [typeBalance]: +(user[typeBalance] - createLobbyRate).toFixed(2) }
  );

  await ctx.reply(`–õ–æ–±–±–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω–æ.

–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—ã–ª–æ —É–¥–µ—Ä–∞–∂–Ω–∞ —Å—É–º–º–∞: ${createLobbyRate}p`);
  ctx.session.state.createLobbyStep = 0;

  await showMyLobby(ctx);
}

async function deleteLobby(ctx) {
  const { lobbyId, typeBalance } = ctx.session.state;

  const lobby = await PvpGame.findOne({ lobbyId });

  if (!lobby || lobby.rivals.indexOf(ctx.from.id) === -1) return;

  const user = await User.findOne({ userId: ctx.from.id });
  const userIndex = lobby.rivals.indexOf(ctx.from.id);

  lobby.rivals.splice(userIndex, 1);

  if (lobby.rivals.length !== 0) {
    await PvpGame.updateOne({ lobbyId }, { rivals: lobby.rivals });
  } else {
    await PvpGame.deleteOne({ lobbyId });
  }

  await User.updateOne(
    { userId: ctx.from.id },
    { [typeBalance]: +(user[typeBalance] + lobby.prize).toFixed(2) }
  );

  await ctx.reply(`–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ –ª–æ–±–±–∏.
–í–æ–∑–≤—Ä–∞—Ç —É–¥–µ—Ä–∂–∞–Ω–Ω–æ–π —Å—É–º–º—ã: ${lobby.prize}
–í–∞—à –±–∞–ª–∞–Ω—Å: ${(user[typeBalance] + lobby.prize).toFixed(2)}`);

  await showMyLobby(ctx);
}

function separate(arr) {
  let cols = 1;
  let rows = 5;

  const rowsItems = [];
  for (let i = 0, j = arr.length; i < j; i += cols) {
    const row = arr.slice(i, i + cols);
    rowsItems.push(row);
  }

  const pagesItems = [];
  for (let i = 0, j = rowsItems.length; i < j; i += rows) {
    const page = rowsItems.slice(i, i + rows);
    pagesItems.push(page);
  }

  return pagesItems;
}

function timeout(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

function setState(ctx) {
  return new Promise((resolve) => {
    ctx.session.state.actionStatus = true;
    resolve();
  });
}
function removeState(ctx) {
  return new Promise((resolve) => {
    ctx.session.state.actionStatus = false;
    resolve();
  });
}

module.exports = { pvpDiceGame };
