const moment = require("moment");
const Extra = require("telegraf/extra");
const Markup = require("telegraf/markup");

const User = require("../models/user");
const MainStats = require("../models/mainstats");

async function saveAdsStats(ads, adsName) {
  if (ads[adsName]) {
    ads[adsName] = ads[adsName] + 1;
    await MainStats.updateOne({}, { ads });
  } else {
    await MainStats.updateOne({}, { ads: { ...ads, [adsName]: 1 } });
  }
}

async function updateRefUsers(isRef, bonusRefFather) {
  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—É —Å—á–µ—Ç—á–∏–∫ +1 –∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º
  await User.updateOne(
    { userId: isRef },
    { $inc: { countRef: 1, demoBalance: bonusRefFather } }
  );
  try {
    await bot.telegram.sendMessage(
      isRef,
      `–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
–ù–∞ –í–∞—à –î–ï–ú–û-—Å—á–µ—Ç –±—ã–ª–æ –∑–∞—á–∏—Å–ª–µ–Ω–æ ${bonusRefFather}P`
    );
  } catch (error) {}
}

async function updateUser(ctx, user) {
  await User.updateOne(
    { userId: ctx.from.id },
    { isBlocked: false, btnStart: true, userName: ctx.from.username }
  );
  await MainStats.updateOne(
    {},
    {
      $inc: {
        "usersStats.countUsersBlocked": user.isBlocked ? 1 : 0,
        "usersStats.countBtnStart": !user.btnStart ? 1 : 0,
      },
    }
  );
}

async function saveUser(ctx, startDemoBalance, bonus, isRef, constRef) {
  const pvpUsers = await User.find({ "pvp.count": { $gte: 1 } }).sort({
    "pvp.winCash": -1,
  });

  const user = new User({
    userId: ctx.from.id,
    userName: ctx.from.username,
    demoBalance: startDemoBalance + bonus,
    mainBalance: 0,
    userRights: "user",
    isRef,
    refCash: 0,
    countRef: 0,
    isBlocked: false,
    btnStart: true,
    pvp: {
      rating: pvpUsers.length + 1,
      count: 0,
      winCount: 0,
      playCash: 0,
      winCash: 0,
    },
    regDate: moment().format("YYYY-MM-DD"),
  });
  await user.save();
  await MainStats.updateOne(
    {},
    {
      $inc: {
        "usersStats.countUsers": 1,
        "usersStats.countBtnStart": 1,
        "usersStats.countRefUsers": isRef !== constRef ? 1 : 0,
      },
    }
  );
}

async function commandStart(ctx) {
  if (typeof ctx.startPayload === "undefined") {
    ctx.session.state = {};
    ctx.session.is_session = true;

    const selectUser = await User.findOne({ userId: ctx.from.id });
    if (selectUser.userRights === "moder") {
      ctx.session.state = {};
      return await showModerMenu(ctx);
    }

    return await showMainMenu(ctx);
  }

  // –û—Ç–∫–∏–¥—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –ø–∞–±–ª–∏–∫–∞—Ö
  if (+ctx.chat.id < 0) return;

  const startPayload = ctx.startPayload;

  const { constRef, bonusRefDaughter, bonusRefFather, startDemoBalance } =
    await MainStats.findOne({});

  let isRef = constRef;
  let bonus = 0;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
  let payloadType =
    startPayload.indexOf("ref") !== -1
      ? "ref"
      : startPayload.indexOf("ads") !== -1
      ? "ads"
      : "other";

  // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –±—ã–ª –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ
  if (payloadType !== "other") {
    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
    if (payloadType === "ref") {
      const refUserId = startPayload.replace("ref", "");
      if (+refUserId === ctx.from.id) return;
      const status = await User.findOne({ userId: refUserId });
      if (status) {
        isRef = refUserId;
        bonus = bonusRefDaughter;
        updateRefUsers(isRef, bonusRefFather);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∫–ª–∞–º—ã—ã
    if (payloadType === "ads") {
      const { ads } = await MainStats.findOne({});
      const adsName = startPayload.replace("ads-", "");
      // Save ads stats
      saveAdsStats(ads, adsName);
    }
  }

  ctx.session.state = {};
  ctx.session.is_session = true;

  const selectUser = await User.findOne({ userId: ctx.from.id });

  if (!selectUser) {
    saveUser(ctx, startDemoBalance, bonus, isRef, constRef);
  } else {
    if (selectUser.userRights === "moder") {
      ctx.session.state = {};
      return await showModerMenu(ctx);
    }
    updateUser(ctx, selectUser);
    return await showMainMenu(ctx);
  }

  try {
    await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —á–µ—Å—Ç–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω –∏–≥—Ä!
–ó–¥–µ—Å—å —É–¥–∞—á–∞ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—Å!üåà

–í—ã —Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∏–∫–µ—Ä –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º, –∞ –º—ã —Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–ª–∞—Ç–∏–º –í–∞–º –¥–µ–Ω—å–≥–∏! üí∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!üéâ`);

    if (isRef !== constRef) {
      await ctx.reply(`–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. 
–í–∞—à –±–æ–Ω—É—Å: +${bonusRefDaughter} –Ω–∞ –î–ï–ú–û-—Å—á–µ—Ç.`);
    }
  } catch (error) {}

  await showMainMenu(ctx);
}

async function showMainMenu(ctx) {
  // if (!rules) {
  //   await ctx.reply(
  //     "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏",
  //     Extra.markup(Markup.keyboard([["‚úÖ –°–æ–≥–ª–∞—à–∞—é—Å—å"]]).resize())
  //   );
  // } else {
  try {
    await ctx.reply(
      "üëã",
      Extra.markup(
        Markup.keyboard([
          ["üë§ –°–æ–ª–æ", "üë• –ü–≤–ü"],
          // ["üë§ –°–æ–ª–æ", "üë• –ü–≤–ü", "–°–ø–æ—Ä—Ç"],
          ["üì± –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "üí¨ –ß–∞—Ç / –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "‚ÑπÔ∏è –ò–Ω—Ñ–æ"],
        ]).resize()
      )
    );
  } catch (error) {}
}

async function showModerMenu(ctx) {
  try {
    await ctx.reply(
      "üëã",
      Extra.markup(
        Markup.keyboard([
          ["–ó–∞—è–≤–∫–∏ –±–∞–Ω–∫–∏—Ä"],
          ["–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", "–°–æ–∑–¥–∞—Ç—å —Ñ—Ä–∏—Å–ø–∏–Ω"],
          ["–ü–æ–ª–æ–∂–∏—Ç—å –±–æ—Ç–∞", "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"],
        ]).resize()
      )
    );
  } catch (error) {}
}

const rateLimmiter = {};

async function setupStart(bot) {
  bot.start(async (ctx) => {
    const now = Math.floor(Date.now() / 1000);

    if (!rateLimmiter[now]) rateLimmiter[now] = 1;
    if (rateLimmiter[now]) rateLimmiter[now]++;
    if (rateLimmiter[now] > 10) return;

    await commandStart(ctx);
  });
}

module.exports = { setupStart, commandStart, showMainMenu };
