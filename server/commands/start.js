const setupScenes = require("../scens/setupScenes");
const moment = require("moment");
const User = require("../models/user");
const MainStats = require("../models/mainstats");

function setupStart(bot) {
  // Setup scens
  setupScenes(bot);

  async function saveAdsStats(ads, adsName) {
    if (ads[adsName]) {
      ads[adsName] = ads[adsName] + 1;
      await MainStats.updateOne({}, { ads });
    } else {
      await MainStats.updateOne({}, { ads: { ...ads, [adsName]: 1 } });
    }
  }

  // Start command
  bot.start(async (ctx) => {
    // –û—Ç–∫–∏–¥—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –ø–∞–±–ª–∏–∫–∞—Ö
    if (+ctx.chat.id < 0) return;

    const startPayload = ctx.startPayload;

    const { constRef } = await MainStats.findOne({});

    let isRef = constRef;
    let bouns = 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Å—ã–ª–∫–∏
    let payloadType =
      startPayload.indexOf("ref") !== -1
        ? "ref"
        : startPayload.indexOf("ads") !== -1
        ? "ads"
        : "other";

    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –±—ã–ª –ø–æ —Ä–µ—Ñ. —Å—Å—ã–ª–∫–µ
    if (payloadType !== "other") {
      // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
      if (payloadType === "ref") {
        const refUserId = startPayload.replace("ref", "");
        const status = await User.findOne({ userId: refUserId });
        if (status) {
          isRef = refUserId;
          bouns = 10000;
        }
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–∫–ª–∞–º—ã—ã
      if (payloadType === "ads") {
        const { ads } = await MainStats.findOne({});
        const adsName = startPayload.replace("ads-", "");
        // Save ads stats
        saveAdsStats(ads, adsName);
      }
    }

    try {
      const selectUser = await User.findOne({ userId: ctx.from.id });
      if (!selectUser) {
        const user = new User({
          userId: ctx.from.id,
          demoBalance: 2000 + bouns,
          mainBalance: 0,
          isBlocked: false,
          regDate: moment().format("YYYY-MM-DD"),
          userRights: "user",
          isRef,
          refCash: 0,
          countRef: 0,
        });
        await user.save();
        await User.updateOne({ userId: isRef }, { $inc: { countRef: 1 } });
        await bot.telegram.sendMessage(
          isRef,
          "–ü–æ –≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        );
      } else {
        await User.findOne({ userId: ctx.from.id }, { isBlocked: false });
        return await ctx.scene.enter("showMainMenu");
      }

      await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —á–µ—Å—Ç–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω –∏–≥—Ä!
–ó–¥–µ—Å—å —É–¥–∞—á–∞ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—Å!üåà

–í—ã —Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∏–∫–µ—Ä –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º, –∞ –º—ã —Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–ª–∞—Ç–∏–º –í–∞–º –¥–µ–Ω—å–≥–∏! üí∏

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!üéâ`);

      if (isRef !== constRef) {
        await ctx.reply(`–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –ø–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ. 
–í–∞—à –±–æ–Ω—É—Å: +10–∫ –Ω–∞ –î–ï–ú–û —Å—á–µ—Ç.`);
      }

      return await ctx.scene.enter("showMainMenu");
    } catch (err) {
      console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", err.message);
    }
  });
}

module.exports = setupStart;
