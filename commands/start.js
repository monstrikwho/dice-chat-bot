const setupScenes = require("../scens/setupScenes");
const moment = require("moment");
const User = require("../models/user");
const Setting = require("../models/setting");

function setupStart(bot) {
  // Setup scens
  setupScenes(bot);

  const actionsUser = async (ctx) => {
    const selectUser = await User.findOne({ userId: ctx.from.id });

    if (!selectUser) {
      const user = new User({
        userId: ctx.from.id,
        demoBalance: 1000,
        mainBalance: 0,
        regDate: moment().format("DD, MM, YYYY, hh:mm:ss"),
        userName: ctx.from.username,
        isBlocked: false,
      });
      await user.save();
    } else {
      await User.findOne({ userId: ctx.from.id }, { isBlocked: false });
      return await ctx.scene.enter("showMainMenu");
    }

    await ctx.reply(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —á–µ—Å—Ç–Ω—ã—Ö –æ–Ω–ª–∞–π–Ω –∏–≥—Ä!
  –ó–¥–µ—Å—å —É–¥–∞—á–∞ –∑–∞–≤–∏—Å–∏—Ç —Ç–æ–ª—å–∫–æ –æ—Ç –≤–∞—Å!üåà
  
  –í—ã —Å–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º –∏–≥—Ä–æ–≤–æ–π —Å—Ç–∏–∫–µ—Ä –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–º, –∞ –º—ã —Å—á–∏—Ç—ã–≤–∞–µ–º –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –ø–ª–∞—Ç–∏–º –í–∞–º –¥–µ–Ω—å–≥–∏! üí∏
  
  –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ë–ï–°–ü–õ–ê–¢–ù–û –Ω–∞ –¥–µ–º–æ-—Å—á–µ—Ç–µ. –ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã!üéâ`);
    return await ctx.scene.enter("showMainMenu");
  };

  // Start command
  bot.start(async (ctx) => {
    try {
      setTimeout(() => actionsUser(ctx), 0);
    } catch (err) {
      try {
        await User.findOne({ userId: ctx.from.id }, { isBlocked: true });
        await Setting.findOne({}, { $inc: { countBlocked: 1 } });
      } catch (error) {
        console.log("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª-–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–≤–æ–≤–∞—à–∏—Ö.");
      }
      console.log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", err.message);
    }
  });
}

// Exports
module.exports = setupStart;
