const Scene = require("telegraf/scenes/base");
const Extra = require("telegraf/extra");
const Markup = require("telegraf/markup");

const getRasp = require("../helpers/getRasp");

const User = require("../models/user");
const Teachers = require("../models/teachers");

// *************************** STEP 1 *******************************************
const raspTeachers = new Scene("raspTeachers");
raspTeachers.enter((ctx) => {
  return ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.",
    Extra.markup(
      Markup.keyboard([
        ["‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"],
        // –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–ª–∞–¥–∫–∏.. –≤ –±–¥ —Å–æ—Ö—Ä–∞–Ω—è–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∏—Å–∫–∞ (–ø—Ä–µ–ø–æ–¥, –≥—Ä—É–ø–ø–∞)
      ]).resize()
    )
  );
});

raspTeachers.hears(/./, async (ctx) => {
  if (ctx.update.message.text === "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥") {
    return await ctx.scene.enter("showSettingsMenu");
  }

  const status = await Teachers.findOne({
    teacher: ctx.update.message.text,
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ —é–∑–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ ctx.session
  if (status) {
    await User.updateOne(
      { userId: ctx.from.id },
      { otherTeacher: status.teacher }
    );
    ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${status.teacher}`);
    return await ctx.scene.enter("setupDay");
  }

  // –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
  const message = ctx.update.message.text.replace(/\s/g, "");
  const statusId = await Teachers.find({
    lastName: message[0].toUpperCase() + message.slice(1),
  });
  if (statusId.length !== 0) {
    return await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞",
      Extra.markup(
        Markup.keyboard([statusId.map((item) => item.teacher)]).resize()
      )
    );
  } else {
    await ctx.reply("–¢–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

//

//

//

//
const setupDay = new Scene("setupDay");
setupDay.enter((ctx) => {
  return ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
    Extra.markup(
      Markup.keyboard([
        ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ù–µ–¥–µ–ª—è"],
        ["üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"],
      ]).resize()
    )
  );
});

setupDay.hears("–°–µ–≥–æ–¥–Ω—è", async (ctx) => {
  await getRasp(ctx, 8);
});
setupDay.hears("–ó–∞–≤—Ç—Ä–∞", async (ctx) => {
  await getRasp(ctx, 9);
});
setupDay.hears("–ù–µ–¥–µ–ª—è", async (ctx) => {
  await ctx.scene.enter("weekMenu");
});

setupDay.hears(/./, async (ctx) => {
  if (ctx.update.message.text === "üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é") {
    await User.updateOne({ userId: ctx.from.id }, {$unset: {otherTeacher: 1 }});
    return await ctx.scene.enter("showMainMenu");
  }
  await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.')
});

//

//
module.exports = { raspTeachers, setupDay };
