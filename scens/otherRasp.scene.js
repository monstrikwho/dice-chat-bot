const Scene = require("telegraf/scenes/base");
const Extra = require("telegraf/extra");
const Markup = require("telegraf/markup");

const getRasp = require("../helpers/getRasp");

const buttonNames = require("../keyboards/buttonNames");
const groupsHook = require("../keyboards/getGroupsHook");

const User = require("../models/user");
const Teachers = require("../models/teachers");

const checkRasp = require('../helpers/checkRasp')

let regex = /./;
let deleteMsg = null;

// *************************** TEACHERS *******************************************
const raspTeachers = new Scene("raspTeachers");
raspTeachers.enter(async (ctx) => {
  return await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.",
    Extra.markup(Markup.keyboard([["‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]]).resize())
  );
});

raspTeachers.hears(/./, async (ctx) => {
  if (ctx.update.message.text === "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥") {
    return await ctx.scene.enter("showSettingsMenu");
  }

  const status = await Teachers.findOne({
    teacher: ctx.update.message.text,
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–ª –ª–∏ —é–∑–µ—Ä –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ ctx.session
  if (status) {
    await User.updateOne(
      { userId: ctx.from.id },
      { otherTeacher: status.teacher }
    );
    await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏: ${status.teacher}`);
    return await ctx.scene.enter("setupDay");
  }

  // –ò—â–µ–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏—é
  const message = ctx.update.message.text.replace(/\s/g, "");
  const statusId = await Teachers.find({
    lastName: message[0].toUpperCase() + message.slice(1),
  });
  if (statusId.length !== 0) {
    return await ctx.reply(
      "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞",
      Extra.markup(
        Markup.keyboard([statusId.map((item) => item.teacher)]).resize()
      )
    );
  } else {
    await ctx.reply("–¢–∞–∫–æ–π —Ñ–∞–º–∏–ª–∏–∏ –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

//

//

//

//

// *************************** STUDENTS *******************************************
const raspStudents = new Scene("raspStudents");
raspStudents.enter(async (ctx) => {
  await ctx.reply(
    "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø",
    Extra.markup(Markup.keyboard([["‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]]).resize())
  );
  deleteMsg = await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç",
    Extra.HTML().markup((m) =>
      m.inlineKeyboard(
        buttonNames.faculty.map((items) =>
          items.map((item) => m.callbackButton(item, item))
        )
      )
    )
  );
});

raspStudents.hears(/./, async (ctx) => {
  if (ctx.update.message.text === "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥") {
    return await ctx.scene.enter("showSettingsMenu");
  }
  await ctx.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç");
});
raspStudents.leave(
  async (ctx) => await ctx.deleteMessage(deleteMsg.message_id)
);
raspStudents.action(/(?:–ò–§|–§–ü–∏–ü|–ò–ü–ö–∏–ü|–§–≠–ü|–§–°–∏–ì–Ø)/, async (ctx) => {
  ctx.session.state = { ...ctx.session.state, faculty: ctx.match[0] };
  await ctx.scene.enter("takeSpec");
});

// ************************* TAKE SPEC **************************************
const takeSpec = new Scene("takeSpec");
takeSpec.enter(async (ctx) => {
  const faculty = () => {
    if (ctx.session.state.faculty === "–ò–§") {
      regex = /(?:–ê–¢–ü|–ê|–ò–¢–≤–ú|–ò–°–¢|–ú–∏–ú|–ü–ò–¢–¢|–¢–û–°–ü|–¢–û|–¢–ú)/;
      return "if";
    }
    if (ctx.session.state.faculty === "–§–ü–∏–ü") {
      regex = /(?:–ì–≠|–î–û|–ù–û|–û–¢–ò|–û–ü|–ü–ü|–°–ü|–°–ü–î|–¢–∏–ú–û–í|–§–ö)/;
      return "fpip";
    }
    if (ctx.session.state.faculty === "–ò–ü–ö–∏–ü") {
      regex = /(?:–ë–£|–î–û|–ü–î|–ü–†|–ü–ü|–ü–û|–≠–∏–£–ü–ü)/;
      return "ipkap";
    }
    if (ctx.session.state.faculty === "–§–≠–ü") {
      regex = /(?:–ë|–ë–ê|–ú|–ü–•|–≠–û–ü|–≠–¢|–≠–ü|–≠–ú)/;
      return "fep";
    }
    if (ctx.session.state.faculty === "–§–°–∏–ì–Ø") {
      regex = /(?:–ë–ò–Ø|–ò–Ø|–ù–ê|–†–ò–Ø|–°–ò–Ø)/;
      return "fsigi";
    }
  };
  deleteMsg = await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å",
    Extra.HTML().markup((m) =>
      m.inlineKeyboard(
        buttonNames.specialtys[faculty()].map((items) =>
          items.map((item) => m.callbackButton(item, item))
        )
      )
    )
  );
});

takeSpec.hears(/./, async (ctx) => {
  if (ctx.update.message.text === "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥") {
    return await ctx.scene.enter("raspStudents");
  }
  await ctx.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å");
});
takeSpec.leave(async (ctx) => await ctx.deleteMessage(deleteMsg.message_id));
takeSpec.action(regex, async (ctx) => {
  ctx.session.state = {
    ...ctx.session.state,
    specialty: ctx.update.callback_query.data,
  };
  await ctx.scene.enter("takeGroup");
});

// ************************** TAKE GROUP ****************************************
const takeGroup = new Scene("takeGroup");
takeGroup.enter(async (ctx) => {
  let resGroupHook = [...groupsHook(ctx.session.state)];
  regex = resGroupHook[0];

  deleteMsg = await ctx.reply(
    "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥",
    Extra.HTML().markup((m) =>
      m.inlineKeyboard(
        buttonNames.groups[resGroupHook[1]].map((items) =>
          items.map((item) => m.callbackButton(item, item))
        )
      )
    )
  );
});
takeGroup.hears(/./, async (ctx) => {
  if (ctx.update.message.text === "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥") {
    return await ctx.scene.enter("takeSpec");
  }
  await ctx.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É");
});
takeGroup.leave(async (ctx) => {
  await ctx.deleteMessage(deleteMsg.message_id);
});
takeGroup.action(regex, async (ctx) => {
  ctx.session.state = {
    ...ctx.session.state,
    group: ctx.update.callback_query.data,
  };

  await User.updateOne(
    { userId: ctx.from.id },
    { otherStudents: ctx.session.state.group }
  );

  await ctx.replyWithHTML(
    `–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: <pre language="c++">üëâüèª ${ctx.session.state.group}</pre>`
  );

  await ctx.scene.enter("setupDay");
});

//

//

//

//

// *************************** SET UP DAY *******************************************
const setupDay = new Scene("setupDay");
setupDay.enter(async (ctx) => {
  return await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å",
    Extra.markup(
      Markup.keyboard([
        ["–°–µ–≥–æ–¥–Ω—è", "–ó–∞–≤—Ç—Ä–∞", "–ü–æ–ª–Ω–æ–µ üì∑"],
        ["üìå –î–æ–±–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"],
      ]).resize()
    )
  );
});

setupDay.hears("–°–µ–≥–æ–¥–Ω—è", async (ctx) => {
  await getRasp(ctx, 8);
});
setupDay.hears("–ó–∞–≤—Ç—Ä–∞", async (ctx) => {
  await getRasp(ctx, 9);
});
setupDay.hears("–ü–æ–ª–Ω–æ–µ üì∑", async (ctx) => {
  const today = new Date().getDay();

  let statusRasp =
    today === 3 ? await checkRasp() : today === 4 || today === 5 ? true : false;

  if (statusRasp || today === 4 || today === 5) {
    return await ctx.scene.enter("weekMenu");
  }

  if (today === 1 || today === 2 || (today === 3 && !statusRasp)) {
    await ctx.reply("–û—Ç–≤–µ—Ç –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");
    await ctx.reply("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é.");
    return await getRasp(ctx, 0);
  }

  if (today === 6 || today === 0) {
    await ctx.reply("–û—Ç–≤–µ—Ç –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...");
    await ctx.reply("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.");
    return await getRasp(ctx, 1);
  }
});

setupDay.hears("üè° –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é", async (ctx) => {
  await User.updateOne(
    { userId: ctx.from.id },
    { $unset: { otherTeacher: 1, otherStudents: 1 } }
  );
  return await ctx.scene.enter("showMainMenu");
});

setupDay.hears("üìå –î–æ–±–∞–≤–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", async (ctx) => {
  const status = await User.findOne({ userId: ctx.from.id });

  if (status.otherTeacher) {
    let favTeachers = status.favTeachers ? status.favTeachers : [];
    if(favTeachers.length === 6) {
      return await ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ç–æ–ª—å–∫–æ 6 –ø–æ–∑–∏—Ü–∏–π.')
    } else {
      favTeachers.push(status.otherTeacher);
      return await User.updateOne({ userId: ctx.from.id }, { favTeachers });
    }
  }

  if (status.otherStudents) {
    let favStudents = status.favStudents ? status.favStudents : [];
    if(favStudents.length === 6) {
      return await ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ —Ç–æ–ª—å–∫–æ 6 –ø–æ–∑–∏—Ü–∏–π.')
    } else {
      favStudents.push(status.otherStudents);
      return await User.updateOne({ userId: ctx.from.id }, { favStudents });
    }
  }
});

//

//
module.exports = { raspTeachers, raspStudents, takeSpec, takeGroup, setupDay };
