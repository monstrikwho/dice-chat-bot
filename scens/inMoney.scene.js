const Scene = require("telegraf/scenes/base");
const Extra = require("telegraf/extra");
const Markup = require("telegraf/markup");

const { donate } = require("../helpers/freeKassaMethods");
const checkOrder = require("../init/checkOrder");

// *************************** CUR PAY ***********************************
const curPay = new Scene("curPay");
curPay.enter(async (ctx) => {
  return await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã",
    Extra.markup(
      Markup.keyboard([
        ["MC/Visa", "–Ø–Ω–¥–µ–∫—Å", "Qiwi"],
        ["‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"],
      ]).resize()
    )
  );
});

curPay.hears(/(?:‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)/, async ({ scene }) => {
  return await scene.enter("lkMenu");
});

curPay.hears(/./, async (ctx) => {
  const msg = ctx.update.message.text;
  if (msg === "MC/Visa") ctx.session.state = { cur_id: 160 };
  if (msg === "–Ø–Ω–¥–µ–∫—Å") ctx.session.state = { cur_id: 45 };
  if (msg === "Qiwi") ctx.session.state = { cur_id: 63 };
  return await ctx.scene.enter("inMoney");
});

//

//

const replyMsg = (
  amount,
  url
) => `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—É–º–º—É  üí∞ ${amount}‚ÇΩ. 
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.
üîó <a href="${url}">–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã</a>

üü¢–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–ª–∞—Ç–µ–∂ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –Ω–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂".

‚ö†Ô∏è–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–æ–∫–∏–¥–∞–π—Ç–µ —ç—Ç–æ –º–µ–Ω—é, –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç–µ–∂.
‚ö†Ô∏è–ï—Å–ª–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –µ–≥–æ, –≤–æ–π–¥–∏—Ç–µ –Ω–∞–∑–∞–¥ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂".`;

// 

// ********************************* IN MONEY ***********************************
const inMoney = new Scene("inMoney");
inMoney.enter(async (ctx) => {
  return await ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è",
    Extra.markup(
      Markup.keyboard([
        ["15‚ÇΩ", "30‚ÇΩ", "50‚ÇΩ", "100‚ÇΩ", "500‚ÇΩ"],
        ["–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º–º—É"],
        ["‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"],
      ]).resize()
    )
  );
});

inMoney.hears(/(?:15‚ÇΩ|30‚ÇΩ|50‚ÇΩ|100‚ÇΩ|500‚ÇΩ)/, async (ctx) => {
  const amount = +ctx.update.message.text.replace(/\D+/, "").replace("‚ÇΩ", "");
  const cur_id = ctx.session.state.cur_id;
  const [url, orderId] = await donate(amount, cur_id);
  await ctx.replyWithHTML(
    replyMsg(amount, url),
    Extra.markup((m) =>
      m.inlineKeyboard([
        [m.callbackButton(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚Ññ${orderId}`, `${orderId}`)],
      ])
    )
  );
});

inMoney.hears("–í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥—É—é —Å—É–º–º–º—É", async ({ scene }) => {
  return await scene.enter("writeAmount");
});

inMoney.hears(/(?:‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥)/, async ({ scene }) => {
  return await scene.enter("curPay");
});

// 

//

// ****************************** WRITE OTHER AMOUNT *******************************
const writeAmount = new Scene("writeAmount");
writeAmount.enter(async (ctx) => {
  return await ctx.reply(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.",
    Extra.markup(Markup.keyboard([["‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"]]).resize())
  );
});

writeAmount.on("text", async (ctx) => {
  const msg = ctx.update.message.text;

  if (msg === "‚Ü™Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥") {
    return await ctx.scene.enter("inMoney");
  }

  const amount = ctx.update.message.text.replace(/\D+/, "");
  if (Number(amount) && amount >= 15) {
    const cur_id = ctx.session.state.cur_id;
    const [url, orderId] = await donate(amount, cur_id);

    return await ctx.replyWithHTML(
      replyMsg(amount, url),
      Extra.markup((m) =>
        m.inlineKeyboard([
          [m.callbackButton(`–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂ ‚Ññ${orderId}`, `${orderId}`)],
        ])
      )
    );
  } else {
    if (amount < 15)
      return await ctx.reply("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 15—Ä.");
    return ctx.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
});

// **************************** INIT ACTIONS *******************************
checkOrder(inMoney);
checkOrder(writeAmount);

module.exports = { curPay, inMoney, writeAmount };
