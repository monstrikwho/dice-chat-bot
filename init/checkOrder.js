const User = require("../models/user");
const { checkOrder } = require("../helpers/freeKassaMethods");

module.exports = (scene) => {
  scene.action(/./, async (ctx) => {
    const orderId = +ctx.update.callback_query.data;
    const order = await checkOrder(orderId);

    if (order.status === "new")
      return await ctx.answerCbQuery(
        `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É. –í–∞—à –ø–ª–∞—Ç–µ–∂ ‚Ññ${orderId} –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.`,
        true
      );
  
    if (order.status === "fast")
      return await ctx.answerCbQuery(
        `–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥.`,
        true
      );
  
    if (order.status) {
      const user = await User.findOne({ userId: ctx.from.id });
      const toTransfer = +order.amount + user.mainBalance
      await User.updateOne(
        { userId: ctx.from.id },
        { mainBalance: toTransfer }
      );
       await ctx.answerCbQuery(
        `–í–∞—à –ø–ª–∞—Ç–µ–∂ ‚Ññ${orderId} —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω.`,
        true
      );
      return await ctx.reply(`–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ üí∞ ${+order.amount}‚ÇΩ
–í–∞—à –±–∞–ª–∞–Ω—Å: ${toTransfer}`)
    }
    return await ctx.answerCbQuery(
      `–í–∞—à –ø–ª–∞—Ç–µ–∂ ‚Ññ${orderId} –Ω–µ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω.`,
      true
    );
  });
}
